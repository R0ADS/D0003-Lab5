
D0003E-Lab5-Traffic.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000034  00800100  000021b4  00002248  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000021b4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000357  00800134  00800134  0000227c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000227c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000022ac  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000258  00000000  00000000  000022ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002d80  00000000  00000000  00002544  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000011f4  00000000  00000000  000052c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000169d  00000000  00000000  000064b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000c0c  00000000  00000000  00007b58  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000998  00000000  00000000  00008764  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00002fcc  00000000  00000000  000090fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000002f0  00000000  00000000  0000c0c8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 6b 04 	jmp	0x8d6	; 0x8d6 <__vector_1>
       8:	0c 94 d7 04 	jmp	0x9ae	; 0x9ae <__vector_2>
       c:	0c 94 43 05 	jmp	0xa86	; 0xa86 <__vector_3>
      10:	0c 94 af 05 	jmp	0xb5e	; 0xb5e <__vector_4>
      14:	0c 94 1b 06 	jmp	0xc36	; 0xc36 <__vector_5>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 56 0c 	jmp	0x18ac	; 0x18ac <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 03 0c 	jmp	0x1806	; 0x1806 <__vector_9>
      28:	0c 94 87 06 	jmp	0xd0e	; 0xd0e <__vector_10>
      2c:	0c 94 f3 06 	jmp	0xde6	; 0xde6 <__vector_11>
      30:	0c 94 5f 07 	jmp	0xebe	; 0xebe <__vector_12>
      34:	0c 94 cb 07 	jmp	0xf96	; 0xf96 <__vector_13>
      38:	0c 94 37 08 	jmp	0x106e	; 0x106e <__vector_14>
      3c:	0c 94 a3 08 	jmp	0x1146	; 0x1146 <__vector_15>
      40:	0c 94 0f 09 	jmp	0x121e	; 0x121e <__vector_16>
      44:	0c 94 7b 09 	jmp	0x12f6	; 0x12f6 <__vector_17>
      48:	0c 94 e7 09 	jmp	0x13ce	; 0x13ce <__vector_18>
      4c:	0c 94 53 0a 	jmp	0x14a6	; 0x14a6 <__vector_19>
      50:	0c 94 bf 0a 	jmp	0x157e	; 0x157e <__vector_20>
      54:	0c 94 2b 0b 	jmp	0x1656	; 0x1656 <__vector_21>
      58:	0c 94 97 0b 	jmp	0x172e	; 0x172e <__vector_22>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d4 e0       	ldi	r29, 0x04	; 4
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	11 e0       	ldi	r17, 0x01	; 1
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e4 eb       	ldi	r30, 0xB4	; 180
      70:	f1 e2       	ldi	r31, 0x21	; 33
      72:	02 c0       	rjmp	.+4      	; 0x78 <__do_copy_data+0x10>
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0
      78:	a4 33       	cpi	r26, 0x34	; 52
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <__do_copy_data+0xc>

0000007e <__do_clear_bss>:
      7e:	24 e0       	ldi	r18, 0x04	; 4
      80:	a4 e3       	ldi	r26, 0x34	; 52
      82:	b1 e0       	ldi	r27, 0x01	; 1
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	ab 38       	cpi	r26, 0x8B	; 139
      8a:	b2 07       	cpc	r27, r18
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 4b 03 	call	0x696	; 0x696 <main>
      92:	0c 94 d8 10 	jmp	0x21b0	; 0x21b0 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <transmit>:
#include <avr/io.h>
#include "Communication.h"

// Sends data to simulator
int transmit(Communication *self, int data) {
	while ( !(UCSR0A & (1<<UDRE0)) );
      9a:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
      9e:	85 ff       	sbrs	r24, 5
      a0:	fc cf       	rjmp	.-8      	; 0x9a <transmit>
	UDR0 = data;
      a2:	60 93 c6 00 	sts	0x00C6, r22	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
      a6:	08 95       	ret

000000a8 <updateDisplay>:

Msg test;
Msg teste;

// Displays our three variables on corresponding segments
int updateDisplay(Handler *self) {
      a8:	cf 92       	push	r12
      aa:	df 92       	push	r13
      ac:	ef 92       	push	r14
      ae:	ff 92       	push	r15
      b0:	0f 93       	push	r16
      b2:	1f 93       	push	r17
      b4:	cf 93       	push	r28
      b6:	df 93       	push	r29
      b8:	ec 01       	movw	r28, r24
	ASYNC(self->lcd, printAt, self->northQueue * 10);
      ba:	8c 85       	ldd	r24, Y+12	; 0x0c
      bc:	9d 85       	ldd	r25, Y+13	; 0x0d
      be:	6c 01       	movw	r12, r24
      c0:	cc 0c       	add	r12, r12
      c2:	dd 1c       	adc	r13, r13
      c4:	88 0f       	add	r24, r24
      c6:	99 1f       	adc	r25, r25
      c8:	88 0f       	add	r24, r24
      ca:	99 1f       	adc	r25, r25
      cc:	88 0f       	add	r24, r24
      ce:	99 1f       	adc	r25, r25
      d0:	c8 0e       	add	r12, r24
      d2:	d9 1e       	adc	r13, r25
      d4:	0e 81       	ldd	r16, Y+6	; 0x06
      d6:	1f 81       	ldd	r17, Y+7	; 0x07
      d8:	4e e1       	ldi	r20, 0x1E	; 30
      da:	e4 2e       	mov	r14, r20
      dc:	43 e0       	ldi	r20, 0x03	; 3
      de:	f4 2e       	mov	r15, r20
      e0:	20 e0       	ldi	r18, 0x00	; 0
      e2:	30 e0       	ldi	r19, 0x00	; 0
      e4:	a9 01       	movw	r20, r18
      e6:	60 e0       	ldi	r22, 0x00	; 0
      e8:	70 e0       	ldi	r23, 0x00	; 0
      ea:	cb 01       	movw	r24, r22
      ec:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <async>
	ASYNC(self->lcd, printAt, self->onBridge * 10 + 2);
      f0:	8e 85       	ldd	r24, Y+14	; 0x0e
      f2:	9f 85       	ldd	r25, Y+15	; 0x0f
      f4:	6c 01       	movw	r12, r24
      f6:	cc 0c       	add	r12, r12
      f8:	dd 1c       	adc	r13, r13
      fa:	88 0f       	add	r24, r24
      fc:	99 1f       	adc	r25, r25
      fe:	88 0f       	add	r24, r24
     100:	99 1f       	adc	r25, r25
     102:	88 0f       	add	r24, r24
     104:	99 1f       	adc	r25, r25
     106:	c8 0e       	add	r12, r24
     108:	d9 1e       	adc	r13, r25
     10a:	82 e0       	ldi	r24, 0x02	; 2
     10c:	c8 0e       	add	r12, r24
     10e:	d1 1c       	adc	r13, r1
     110:	0e 81       	ldd	r16, Y+6	; 0x06
     112:	1f 81       	ldd	r17, Y+7	; 0x07
     114:	20 e0       	ldi	r18, 0x00	; 0
     116:	30 e0       	ldi	r19, 0x00	; 0
     118:	a9 01       	movw	r20, r18
     11a:	60 e0       	ldi	r22, 0x00	; 0
     11c:	70 e0       	ldi	r23, 0x00	; 0
     11e:	cb 01       	movw	r24, r22
     120:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <async>
	ASYNC(self->lcd, printAt, self->southQueue * 10 + 4);
     124:	8a 85       	ldd	r24, Y+10	; 0x0a
     126:	9b 85       	ldd	r25, Y+11	; 0x0b
     128:	6c 01       	movw	r12, r24
     12a:	cc 0c       	add	r12, r12
     12c:	dd 1c       	adc	r13, r13
     12e:	88 0f       	add	r24, r24
     130:	99 1f       	adc	r25, r25
     132:	88 0f       	add	r24, r24
     134:	99 1f       	adc	r25, r25
     136:	88 0f       	add	r24, r24
     138:	99 1f       	adc	r25, r25
     13a:	c8 0e       	add	r12, r24
     13c:	d9 1e       	adc	r13, r25
     13e:	84 e0       	ldi	r24, 0x04	; 4
     140:	c8 0e       	add	r12, r24
     142:	d1 1c       	adc	r13, r1
     144:	0e 81       	ldd	r16, Y+6	; 0x06
     146:	1f 81       	ldd	r17, Y+7	; 0x07
     148:	20 e0       	ldi	r18, 0x00	; 0
     14a:	30 e0       	ldi	r19, 0x00	; 0
     14c:	a9 01       	movw	r20, r18
     14e:	60 e0       	ldi	r22, 0x00	; 0
     150:	70 e0       	ldi	r23, 0x00	; 0
     152:	cb 01       	movw	r24, r22
     154:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <async>
}
     158:	df 91       	pop	r29
     15a:	cf 91       	pop	r28
     15c:	1f 91       	pop	r17
     15e:	0f 91       	pop	r16
     160:	ff 90       	pop	r15
     162:	ef 90       	pop	r14
     164:	df 90       	pop	r13
     166:	cf 90       	pop	r12
     168:	08 95       	ret

0000016a <reduceBridge>:

// Seperate function that reduces onbridge (needed for AFTER)
int reduceBridge(Handler *self) {
     16a:	cf 92       	push	r12
     16c:	df 92       	push	r13
     16e:	ef 92       	push	r14
     170:	ff 92       	push	r15
     172:	0f 93       	push	r16
     174:	1f 93       	push	r17
	self->onBridge--;
     176:	fc 01       	movw	r30, r24
     178:	26 85       	ldd	r18, Z+14	; 0x0e
     17a:	37 85       	ldd	r19, Z+15	; 0x0f
     17c:	21 50       	subi	r18, 0x01	; 1
     17e:	31 09       	sbc	r19, r1
     180:	37 87       	std	Z+15, r19	; 0x0f
     182:	26 87       	std	Z+14, r18	; 0x0e
	ASYNC(self, updateDisplay, NULL);
     184:	c1 2c       	mov	r12, r1
     186:	d1 2c       	mov	r13, r1
     188:	24 e5       	ldi	r18, 0x54	; 84
     18a:	e2 2e       	mov	r14, r18
     18c:	20 e0       	ldi	r18, 0x00	; 0
     18e:	f2 2e       	mov	r15, r18
     190:	8c 01       	movw	r16, r24
     192:	20 e0       	ldi	r18, 0x00	; 0
     194:	30 e0       	ldi	r19, 0x00	; 0
     196:	a9 01       	movw	r20, r18
     198:	60 e0       	ldi	r22, 0x00	; 0
     19a:	70 e0       	ldi	r23, 0x00	; 0
     19c:	cb 01       	movw	r24, r22
     19e:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <async>
}
     1a2:	1f 91       	pop	r17
     1a4:	0f 91       	pop	r16
     1a6:	ff 90       	pop	r15
     1a8:	ef 90       	pop	r14
     1aa:	df 90       	pop	r13
     1ac:	cf 90       	pop	r12
     1ae:	08 95       	ret

000001b0 <deQueuer>:

// Moves car from queue (dependent on dir) to bridge
int deQueuer(Handler *self, int dir){
     1b0:	cf 92       	push	r12
     1b2:	df 92       	push	r13
     1b4:	ef 92       	push	r14
     1b6:	ff 92       	push	r15
     1b8:	0f 93       	push	r16
     1ba:	1f 93       	push	r17
     1bc:	fc 01       	movw	r30, r24
	if (dir){
     1be:	67 2b       	or	r22, r23
     1c0:	09 f5       	brne	.+66     	; 0x204 <__EEPROM_REGION_LENGTH__+0x4>
		self->northQueue--;
	}
	else{
		self->southQueue--;
     1c2:	82 85       	ldd	r24, Z+10	; 0x0a
     1c4:	93 85       	ldd	r25, Z+11	; 0x0b
     1c6:	01 97       	sbiw	r24, 0x01	; 1
     1c8:	93 87       	std	Z+11, r25	; 0x0b
     1ca:	82 87       	std	Z+10, r24	; 0x0a
	}
	self->onBridge++;
     1cc:	86 85       	ldd	r24, Z+14	; 0x0e
     1ce:	97 85       	ldd	r25, Z+15	; 0x0f
     1d0:	01 96       	adiw	r24, 0x01	; 1
     1d2:	97 87       	std	Z+15, r25	; 0x0f
     1d4:	86 87       	std	Z+14, r24	; 0x0e
	//ASYNC(self, updateDisplay, NULL);	// <-- Unnecessary line? Should remove and test
	AFTER(MSEC(5000), self, reduceBridge, NULL);
     1d6:	c1 2c       	mov	r12, r1
     1d8:	d1 2c       	mov	r13, r1
     1da:	85 eb       	ldi	r24, 0xB5	; 181
     1dc:	e8 2e       	mov	r14, r24
     1de:	80 e0       	ldi	r24, 0x00	; 0
     1e0:	f8 2e       	mov	r15, r24
     1e2:	8f 01       	movw	r16, r30
     1e4:	20 e0       	ldi	r18, 0x00	; 0
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	a9 01       	movw	r20, r18
     1ea:	6a e5       	ldi	r22, 0x5A	; 90
     1ec:	72 e6       	ldi	r23, 0x62	; 98
     1ee:	82 e0       	ldi	r24, 0x02	; 2
     1f0:	90 e0       	ldi	r25, 0x00	; 0
     1f2:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <async>
}
     1f6:	1f 91       	pop	r17
     1f8:	0f 91       	pop	r16
     1fa:	ff 90       	pop	r15
     1fc:	ef 90       	pop	r14
     1fe:	df 90       	pop	r13
     200:	cf 90       	pop	r12
     202:	08 95       	ret
}

// Moves car from queue (dependent on dir) to bridge
int deQueuer(Handler *self, int dir){
	if (dir){
		self->northQueue--;
     204:	84 85       	ldd	r24, Z+12	; 0x0c
     206:	95 85       	ldd	r25, Z+13	; 0x0d
     208:	01 97       	sbiw	r24, 0x01	; 1
     20a:	95 87       	std	Z+13, r25	; 0x0d
     20c:	84 87       	std	Z+12, r24	; 0x0c
     20e:	de cf       	rjmp	.-68     	; 0x1cc <deQueuer+0x1c>

00000210 <switcher>:
	ASYNC(self, updateDisplay, NULL);
	ASYNC(self, switcher, NULL);
}

// Determines how and when to signal green on either side
int switcher (Handler *self) {
     210:	cf 92       	push	r12
     212:	df 92       	push	r13
     214:	ef 92       	push	r14
     216:	ff 92       	push	r15
     218:	0f 93       	push	r16
     21a:	1f 93       	push	r17
     21c:	cf 93       	push	r28
     21e:	df 93       	push	r29
     220:	ec 01       	movw	r28, r24
	if (self->isNorth) {
     222:	88 85       	ldd	r24, Y+8	; 0x08
     224:	99 85       	ldd	r25, Y+9	; 0x09
     226:	89 2b       	or	r24, r25
     228:	a1 f1       	breq	.+104    	; 0x292 <switcher+0x82>
		if (self->northQueue && self->counter < 5) {
     22a:	8c 85       	ldd	r24, Y+12	; 0x0c
     22c:	9d 85       	ldd	r25, Y+13	; 0x0d
     22e:	89 2b       	or	r24, r25
     230:	09 f0       	breq	.+2      	; 0x234 <switcher+0x24>
     232:	7f c0       	rjmp	.+254    	; 0x332 <switcher+0x122>
			ASYNC(self->com, transmit, 0b1001);				// Green north
		}
		else {
			if (self->southQueue && self->onBridge == 0) {
     234:	8a 85       	ldd	r24, Y+10	; 0x0a
     236:	9b 85       	ldd	r25, Y+11	; 0x0b
     238:	89 2b       	or	r24, r25
     23a:	09 f0       	breq	.+2      	; 0x23e <switcher+0x2e>
     23c:	91 c0       	rjmp	.+290    	; 0x360 <switcher+0x150>
				self->counter = 0;
				self->isNorth = 0;
				ASYNC(self->com, transmit, 0b0110);			// Green south
			}
			if (!(self->southQueue) && self->counter == 5 && self->onBridge < 5) {
     23e:	88 89       	ldd	r24, Y+16	; 0x10
     240:	99 89       	ldd	r25, Y+17	; 0x11
     242:	05 97       	sbiw	r24, 0x05	; 5
     244:	09 f4       	brne	.+2      	; 0x248 <switcher+0x38>
     246:	ac c0       	rjmp	.+344    	; 0x3a0 <switcher+0x190>
			if (!(self->northQueue) && self->counter == 5 && self->onBridge < 5) {
				self->counter--;
				ASYNC(self->com, transmit, 0b0110);			// Green south
			}
			else {
				if (test) {
     248:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <test>
     24c:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <test+0x1>
     250:	00 97       	sbiw	r24, 0x00	; 0
     252:	11 f0       	breq	.+4      	; 0x258 <switcher+0x48>
					ABORT(test);
     254:	0e 94 b3 0f 	call	0x1f66	; 0x1f66 <ABORT>
				}
				test = AFTER(MSEC(1250), self, switcher, NULL);	// NOTE: time needs to be above 1 second to be sure that the update has happend
     258:	c1 2c       	mov	r12, r1
     25a:	d1 2c       	mov	r13, r1
     25c:	88 e0       	ldi	r24, 0x08	; 8
     25e:	e8 2e       	mov	r14, r24
     260:	81 e0       	ldi	r24, 0x01	; 1
     262:	f8 2e       	mov	r15, r24
     264:	8e 01       	movw	r16, r28
     266:	20 e0       	ldi	r18, 0x00	; 0
     268:	30 e0       	ldi	r19, 0x00	; 0
     26a:	a9 01       	movw	r20, r18
     26c:	66 e9       	ldi	r22, 0x96	; 150
     26e:	78 e9       	ldi	r23, 0x98	; 152
     270:	80 e0       	ldi	r24, 0x00	; 0
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <async>
     278:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <test+0x1>
     27c:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <test>
			}
		}
	}
}
     280:	df 91       	pop	r29
     282:	cf 91       	pop	r28
     284:	1f 91       	pop	r17
     286:	0f 91       	pop	r16
     288:	ff 90       	pop	r15
     28a:	ef 90       	pop	r14
     28c:	df 90       	pop	r13
     28e:	cf 90       	pop	r12
     290:	08 95       	ret
				test = AFTER(MSEC(1250), self, switcher, NULL);	// NOTE: time needs to be above 1 second to be sure that the update has happend
			}
		}
	}
	else {
		if (self->southQueue && self->counter < 5) {
     292:	8a 85       	ldd	r24, Y+10	; 0x0a
     294:	9b 85       	ldd	r25, Y+11	; 0x0b
     296:	89 2b       	or	r24, r25
     298:	11 f5       	brne	.+68     	; 0x2de <switcher+0xce>
			ASYNC(self->com, transmit, 0b0110);				// Green south
		}
		else {
			if (self->northQueue && self->onBridge == 0) {
     29a:	8c 85       	ldd	r24, Y+12	; 0x0c
     29c:	9d 85       	ldd	r25, Y+13	; 0x0d
     29e:	89 2b       	or	r24, r25
     2a0:	31 f5       	brne	.+76     	; 0x2ee <switcher+0xde>
				self->counter = 0;
				self->isNorth = 1;
				ASYNC(self->com, transmit, 0b1001);			// Green north 
			}
			if (!(self->northQueue) && self->counter == 5 && self->onBridge < 5) {
     2a2:	88 89       	ldd	r24, Y+16	; 0x10
     2a4:	99 89       	ldd	r25, Y+17	; 0x11
     2a6:	05 97       	sbiw	r24, 0x05	; 5
     2a8:	79 f6       	brne	.-98     	; 0x248 <switcher+0x38>
     2aa:	8e 85       	ldd	r24, Y+14	; 0x0e
     2ac:	9f 85       	ldd	r25, Y+15	; 0x0f
     2ae:	05 97       	sbiw	r24, 0x05	; 5
     2b0:	5c f6       	brge	.-106    	; 0x248 <switcher+0x38>
				self->counter--;
     2b2:	84 e0       	ldi	r24, 0x04	; 4
     2b4:	90 e0       	ldi	r25, 0x00	; 0
     2b6:	99 8b       	std	Y+17, r25	; 0x11
     2b8:	88 8b       	std	Y+16, r24	; 0x10
				ASYNC(self->com, transmit, 0b0110);			// Green south
     2ba:	0c 81       	ldd	r16, Y+4	; 0x04
     2bc:	1d 81       	ldd	r17, Y+5	; 0x05
     2be:	96 e0       	ldi	r25, 0x06	; 6
     2c0:	c9 2e       	mov	r12, r25
     2c2:	d1 2c       	mov	r13, r1
     2c4:	2d e4       	ldi	r18, 0x4D	; 77
     2c6:	e2 2e       	mov	r14, r18
     2c8:	20 e0       	ldi	r18, 0x00	; 0
     2ca:	f2 2e       	mov	r15, r18
     2cc:	20 e0       	ldi	r18, 0x00	; 0
     2ce:	30 e0       	ldi	r19, 0x00	; 0
     2d0:	a9 01       	movw	r20, r18
     2d2:	60 e0       	ldi	r22, 0x00	; 0
     2d4:	70 e0       	ldi	r23, 0x00	; 0
     2d6:	cb 01       	movw	r24, r22
     2d8:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <async>
     2dc:	d1 cf       	rjmp	.-94     	; 0x280 <switcher+0x70>
				test = AFTER(MSEC(1250), self, switcher, NULL);	// NOTE: time needs to be above 1 second to be sure that the update has happend
			}
		}
	}
	else {
		if (self->southQueue && self->counter < 5) {
     2de:	88 89       	ldd	r24, Y+16	; 0x10
     2e0:	99 89       	ldd	r25, Y+17	; 0x11
     2e2:	05 97       	sbiw	r24, 0x05	; 5
     2e4:	54 f3       	brlt	.-44     	; 0x2ba <switcher+0xaa>
			ASYNC(self->com, transmit, 0b0110);				// Green south
		}
		else {
			if (self->northQueue && self->onBridge == 0) {
     2e6:	8c 85       	ldd	r24, Y+12	; 0x0c
     2e8:	9d 85       	ldd	r25, Y+13	; 0x0d
     2ea:	89 2b       	or	r24, r25
     2ec:	d1 f2       	breq	.-76     	; 0x2a2 <switcher+0x92>
     2ee:	8e 85       	ldd	r24, Y+14	; 0x0e
     2f0:	9f 85       	ldd	r25, Y+15	; 0x0f
     2f2:	89 2b       	or	r24, r25
     2f4:	09 f0       	breq	.+2      	; 0x2f8 <switcher+0xe8>
     2f6:	a8 cf       	rjmp	.-176    	; 0x248 <switcher+0x38>
				self->counter = 0;
     2f8:	19 8a       	std	Y+17, r1	; 0x11
     2fa:	18 8a       	std	Y+16, r1	; 0x10
				self->isNorth = 1;
     2fc:	81 e0       	ldi	r24, 0x01	; 1
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	99 87       	std	Y+9, r25	; 0x09
     302:	88 87       	std	Y+8, r24	; 0x08
				ASYNC(self->com, transmit, 0b1001);			// Green north 
     304:	0c 81       	ldd	r16, Y+4	; 0x04
     306:	1d 81       	ldd	r17, Y+5	; 0x05
     308:	39 e0       	ldi	r19, 0x09	; 9
     30a:	c3 2e       	mov	r12, r19
     30c:	d1 2c       	mov	r13, r1
     30e:	4d e4       	ldi	r20, 0x4D	; 77
     310:	e4 2e       	mov	r14, r20
     312:	40 e0       	ldi	r20, 0x00	; 0
     314:	f4 2e       	mov	r15, r20
     316:	20 e0       	ldi	r18, 0x00	; 0
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	a9 01       	movw	r20, r18
     31c:	60 e0       	ldi	r22, 0x00	; 0
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	cb 01       	movw	r24, r22
     322:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <async>
			}
			if (!(self->northQueue) && self->counter == 5 && self->onBridge < 5) {
     326:	8c 85       	ldd	r24, Y+12	; 0x0c
     328:	9d 85       	ldd	r25, Y+13	; 0x0d
     32a:	89 2b       	or	r24, r25
     32c:	09 f0       	breq	.+2      	; 0x330 <switcher+0x120>
     32e:	8c cf       	rjmp	.-232    	; 0x248 <switcher+0x38>
     330:	b8 cf       	rjmp	.-144    	; 0x2a2 <switcher+0x92>
}

// Determines how and when to signal green on either side
int switcher (Handler *self) {
	if (self->isNorth) {
		if (self->northQueue && self->counter < 5) {
     332:	88 89       	ldd	r24, Y+16	; 0x10
     334:	99 89       	ldd	r25, Y+17	; 0x11
     336:	05 97       	sbiw	r24, 0x05	; 5
     338:	0c f0       	brlt	.+2      	; 0x33c <switcher+0x12c>
     33a:	7c cf       	rjmp	.-264    	; 0x234 <switcher+0x24>
				self->isNorth = 0;
				ASYNC(self->com, transmit, 0b0110);			// Green south
			}
			if (!(self->southQueue) && self->counter == 5 && self->onBridge < 5) {
				self->counter--;
				ASYNC(self->com, transmit, 0b1001);			// Green north
     33c:	0c 81       	ldd	r16, Y+4	; 0x04
     33e:	1d 81       	ldd	r17, Y+5	; 0x05
     340:	59 e0       	ldi	r21, 0x09	; 9
     342:	c5 2e       	mov	r12, r21
     344:	d1 2c       	mov	r13, r1
     346:	6d e4       	ldi	r22, 0x4D	; 77
     348:	e6 2e       	mov	r14, r22
     34a:	60 e0       	ldi	r22, 0x00	; 0
     34c:	f6 2e       	mov	r15, r22
     34e:	20 e0       	ldi	r18, 0x00	; 0
     350:	30 e0       	ldi	r19, 0x00	; 0
     352:	a9 01       	movw	r20, r18
     354:	60 e0       	ldi	r22, 0x00	; 0
     356:	70 e0       	ldi	r23, 0x00	; 0
     358:	cb 01       	movw	r24, r22
     35a:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <async>
     35e:	90 cf       	rjmp	.-224    	; 0x280 <switcher+0x70>
	if (self->isNorth) {
		if (self->northQueue && self->counter < 5) {
			ASYNC(self->com, transmit, 0b1001);				// Green north
		}
		else {
			if (self->southQueue && self->onBridge == 0) {
     360:	8e 85       	ldd	r24, Y+14	; 0x0e
     362:	9f 85       	ldd	r25, Y+15	; 0x0f
     364:	89 2b       	or	r24, r25
     366:	09 f0       	breq	.+2      	; 0x36a <switcher+0x15a>
     368:	6f cf       	rjmp	.-290    	; 0x248 <switcher+0x38>
				self->counter = 0;
     36a:	19 8a       	std	Y+17, r1	; 0x11
     36c:	18 8a       	std	Y+16, r1	; 0x10
				self->isNorth = 0;
     36e:	19 86       	std	Y+9, r1	; 0x09
     370:	18 86       	std	Y+8, r1	; 0x08
				ASYNC(self->com, transmit, 0b0110);			// Green south
     372:	0c 81       	ldd	r16, Y+4	; 0x04
     374:	1d 81       	ldd	r17, Y+5	; 0x05
     376:	76 e0       	ldi	r23, 0x06	; 6
     378:	c7 2e       	mov	r12, r23
     37a:	d1 2c       	mov	r13, r1
     37c:	ed e4       	ldi	r30, 0x4D	; 77
     37e:	ee 2e       	mov	r14, r30
     380:	e0 e0       	ldi	r30, 0x00	; 0
     382:	fe 2e       	mov	r15, r30
     384:	20 e0       	ldi	r18, 0x00	; 0
     386:	30 e0       	ldi	r19, 0x00	; 0
     388:	a9 01       	movw	r20, r18
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	70 e0       	ldi	r23, 0x00	; 0
     38e:	cb 01       	movw	r24, r22
     390:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <async>
			}
			if (!(self->southQueue) && self->counter == 5 && self->onBridge < 5) {
     394:	8a 85       	ldd	r24, Y+10	; 0x0a
     396:	9b 85       	ldd	r25, Y+11	; 0x0b
     398:	89 2b       	or	r24, r25
     39a:	09 f0       	breq	.+2      	; 0x39e <switcher+0x18e>
     39c:	55 cf       	rjmp	.-342    	; 0x248 <switcher+0x38>
     39e:	4f cf       	rjmp	.-354    	; 0x23e <switcher+0x2e>
     3a0:	8e 85       	ldd	r24, Y+14	; 0x0e
     3a2:	9f 85       	ldd	r25, Y+15	; 0x0f
     3a4:	05 97       	sbiw	r24, 0x05	; 5
     3a6:	0c f0       	brlt	.+2      	; 0x3aa <switcher+0x19a>
     3a8:	4f cf       	rjmp	.-354    	; 0x248 <switcher+0x38>
				self->counter--;
     3aa:	84 e0       	ldi	r24, 0x04	; 4
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	99 8b       	std	Y+17, r25	; 0x11
     3b0:	88 8b       	std	Y+16, r24	; 0x10
     3b2:	c4 cf       	rjmp	.-120    	; 0x33c <switcher+0x12c>

000003b4 <readValue>:
	//ASYNC(self, updateDisplay, NULL);	// <-- Unnecessary line? Should remove and test
	AFTER(MSEC(5000), self, reduceBridge, NULL);
}

// Reads incoming data and changes variables accordingly
int readValue(Handler *self, int value) {
     3b4:	cf 92       	push	r12
     3b6:	df 92       	push	r13
     3b8:	ef 92       	push	r14
     3ba:	ff 92       	push	r15
     3bc:	0f 93       	push	r16
     3be:	1f 93       	push	r17
     3c0:	cf 93       	push	r28
     3c2:	df 93       	push	r29
     3c4:	ec 01       	movw	r28, r24
	if (value == 1) {			// Car enters northQueue
     3c6:	61 30       	cpi	r22, 0x01	; 1
     3c8:	71 05       	cpc	r23, r1
     3ca:	09 f4       	brne	.+2      	; 0x3ce <readValue+0x1a>
     3cc:	48 c0       	rjmp	.+144    	; 0x45e <__DATA_REGION_LENGTH__+0x5e>
		self->northQueue++;
	}
	if (value == 2) {			// Car enters bridge from north
     3ce:	62 30       	cpi	r22, 0x02	; 2
     3d0:	71 05       	cpc	r23, r1
     3d2:	09 f4       	brne	.+2      	; 0x3d6 <readValue+0x22>
     3d4:	4a c0       	rjmp	.+148    	; 0x46a <__DATA_REGION_LENGTH__+0x6a>
		self->counter++;
		ASYNC(self, deQueuer, 1);
	}
	if (value == 4) {			// Car enters southQueue
     3d6:	64 30       	cpi	r22, 0x04	; 4
     3d8:	71 05       	cpc	r23, r1
     3da:	c1 f0       	breq	.+48     	; 0x40c <__DATA_REGION_LENGTH__+0xc>
		self->southQueue++;
	}
	if (value == 8) {			// Car enters bridge from south
     3dc:	68 30       	cpi	r22, 0x08	; 8
     3de:	71 05       	cpc	r23, r1
     3e0:	d1 f4       	brne	.+52     	; 0x416 <__DATA_REGION_LENGTH__+0x16>
		self->counter++;		
     3e2:	88 89       	ldd	r24, Y+16	; 0x10
     3e4:	99 89       	ldd	r25, Y+17	; 0x11
     3e6:	01 96       	adiw	r24, 0x01	; 1
     3e8:	99 8b       	std	Y+17, r25	; 0x11
     3ea:	88 8b       	std	Y+16, r24	; 0x10
		ASYNC(self, deQueuer, 0);
     3ec:	c1 2c       	mov	r12, r1
     3ee:	d1 2c       	mov	r13, r1
     3f0:	28 ed       	ldi	r18, 0xD8	; 216
     3f2:	e2 2e       	mov	r14, r18
     3f4:	20 e0       	ldi	r18, 0x00	; 0
     3f6:	f2 2e       	mov	r15, r18
     3f8:	8e 01       	movw	r16, r28
     3fa:	20 e0       	ldi	r18, 0x00	; 0
     3fc:	30 e0       	ldi	r19, 0x00	; 0
     3fe:	a9 01       	movw	r20, r18
     400:	60 e0       	ldi	r22, 0x00	; 0
     402:	70 e0       	ldi	r23, 0x00	; 0
     404:	cb 01       	movw	r24, r22
     406:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <async>
     40a:	05 c0       	rjmp	.+10     	; 0x416 <__DATA_REGION_LENGTH__+0x16>
	if (value == 2) {			// Car enters bridge from north
		self->counter++;
		ASYNC(self, deQueuer, 1);
	}
	if (value == 4) {			// Car enters southQueue
		self->southQueue++;
     40c:	8a 85       	ldd	r24, Y+10	; 0x0a
     40e:	9b 85       	ldd	r25, Y+11	; 0x0b
     410:	01 96       	adiw	r24, 0x01	; 1
     412:	9b 87       	std	Y+11, r25	; 0x0b
     414:	8a 87       	std	Y+10, r24	; 0x0a
	}
	if (value == 8) {			// Car enters bridge from south
		self->counter++;		
		ASYNC(self, deQueuer, 0);
	}
	ASYNC(self, updateDisplay, NULL);
     416:	c1 2c       	mov	r12, r1
     418:	d1 2c       	mov	r13, r1
     41a:	84 e5       	ldi	r24, 0x54	; 84
     41c:	e8 2e       	mov	r14, r24
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	f8 2e       	mov	r15, r24
     422:	8e 01       	movw	r16, r28
     424:	20 e0       	ldi	r18, 0x00	; 0
     426:	30 e0       	ldi	r19, 0x00	; 0
     428:	a9 01       	movw	r20, r18
     42a:	60 e0       	ldi	r22, 0x00	; 0
     42c:	70 e0       	ldi	r23, 0x00	; 0
     42e:	cb 01       	movw	r24, r22
     430:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <async>
	ASYNC(self, switcher, NULL);
     434:	98 e0       	ldi	r25, 0x08	; 8
     436:	e9 2e       	mov	r14, r25
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	f9 2e       	mov	r15, r25
     43c:	20 e0       	ldi	r18, 0x00	; 0
     43e:	30 e0       	ldi	r19, 0x00	; 0
     440:	a9 01       	movw	r20, r18
     442:	60 e0       	ldi	r22, 0x00	; 0
     444:	70 e0       	ldi	r23, 0x00	; 0
     446:	cb 01       	movw	r24, r22
     448:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <async>
}
     44c:	df 91       	pop	r29
     44e:	cf 91       	pop	r28
     450:	1f 91       	pop	r17
     452:	0f 91       	pop	r16
     454:	ff 90       	pop	r15
     456:	ef 90       	pop	r14
     458:	df 90       	pop	r13
     45a:	cf 90       	pop	r12
     45c:	08 95       	ret
}

// Reads incoming data and changes variables accordingly
int readValue(Handler *self, int value) {
	if (value == 1) {			// Car enters northQueue
		self->northQueue++;
     45e:	8c 85       	ldd	r24, Y+12	; 0x0c
     460:	9d 85       	ldd	r25, Y+13	; 0x0d
     462:	01 96       	adiw	r24, 0x01	; 1
     464:	9d 87       	std	Y+13, r25	; 0x0d
     466:	8c 87       	std	Y+12, r24	; 0x0c
     468:	d6 cf       	rjmp	.-84     	; 0x416 <__DATA_REGION_LENGTH__+0x16>
	}
	if (value == 2) {			// Car enters bridge from north
		self->counter++;
     46a:	88 89       	ldd	r24, Y+16	; 0x10
     46c:	99 89       	ldd	r25, Y+17	; 0x11
     46e:	01 96       	adiw	r24, 0x01	; 1
     470:	99 8b       	std	Y+17, r25	; 0x11
     472:	88 8b       	std	Y+16, r24	; 0x10
		ASYNC(self, deQueuer, 1);
     474:	cc 24       	eor	r12, r12
     476:	c3 94       	inc	r12
     478:	d1 2c       	mov	r13, r1
     47a:	ba cf       	rjmp	.-140    	; 0x3f0 <readValue+0x3c>

0000047c <Init>:
#define BAUD 9600
#define MYUBRR ((FOSC/(16UL*BAUD))-1)

// Just what you woud expect, all things needed for initialization
void Init(void) {
	CLKPR = 0x80;    // Fix clock speed
     47c:	e1 e6       	ldi	r30, 0x61	; 97
     47e:	f0 e0       	ldi	r31, 0x00	; 0
     480:	80 e8       	ldi	r24, 0x80	; 128
     482:	80 83       	st	Z, r24
	CLKPR = 0x00;
     484:	10 82       	st	Z, r1
	
	// LCD init
	LCDCCR = (1 << LCDCC3) | (1 << LCDCC2) | (1 << LCDCC1) | (1 << LCDCC0);
     486:	8f e0       	ldi	r24, 0x0F	; 15
     488:	80 93 e7 00 	sts	0x00E7, r24	; 0x8000e7 <__TEXT_REGION_LENGTH__+0x7fc0e7>
	//       (                      Voltage                              )
	LCDCRB = (1 << LCDCS) | (1 << LCDMUX1) | (1 << LCDMUX0) | (1 << LCDPM2) | (1 << LCDPM1) | (1 << LCDPM0);
     48c:	87 eb       	ldi	r24, 0xB7	; 183
     48e:	80 93 e5 00 	sts	0x00E5, r24	; 0x8000e5 <__TEXT_REGION_LENGTH__+0x7fc0e5>
	//       (asynch ext)   (        duty cycle           )   (                  segments                 )
	LCDFRR = (1 << LCDCD2) | (1 << LCDCD1) | (1 << LCDCD0);
     492:	87 e0       	ldi	r24, 0x07	; 7
     494:	80 93 e6 00 	sts	0x00E6, r24	; 0x8000e6 <__TEXT_REGION_LENGTH__+0x7fc0e6>
	//       (            Delen med D                    )
	LCDCRA = (1 << LCDAB) | (1 << LCDEN);
     498:	80 ec       	ldi	r24, 0xC0	; 192
     49a:	80 93 e4 00 	sts	0x00E4, r24	; 0x8000e4 <__TEXT_REGION_LENGTH__+0x7fc0e4>
	//       (low power )   (enable lcd)
	
	// ------------------------- Stuffs for communication -------------------------------------------------
	
	/* Set baud rate */
	UBRR0H = (uint8_t)(MYUBRR<<8);
     49e:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
	UBRR0L = (uint8_t)(MYUBRR);
     4a2:	83 e3       	ldi	r24, 0x33	; 51
     4a4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>
	/* Enable receiver and transmitter */
	UCSR0B = (1<<TXEN0) | (1<<RXEN0) | (1<<RXCIE0);
     4a8:	88 e9       	ldi	r24, 0x98	; 152
     4aa:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7fc0c1>
     4ae:	08 95       	ret

000004b0 <interrupter>:

#include <avr/io.h>
#include "InterruptHandler.h"

// Simply calls readvalue. (We want this seperate object since multiple interrupts can happen in short proximity or simultaneously)
int interrupter(InterruptHandler *self) {
     4b0:	cf 92       	push	r12
     4b2:	df 92       	push	r13
     4b4:	ef 92       	push	r14
     4b6:	ff 92       	push	r15
     4b8:	0f 93       	push	r16
     4ba:	1f 93       	push	r17
	ASYNC(self->handler, readValue, UDR0);
     4bc:	c0 90 c6 00 	lds	r12, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
     4c0:	d1 2c       	mov	r13, r1
     4c2:	fc 01       	movw	r30, r24
     4c4:	04 81       	ldd	r16, Z+4	; 0x04
     4c6:	15 81       	ldd	r17, Z+5	; 0x05
     4c8:	8a ed       	ldi	r24, 0xDA	; 218
     4ca:	e8 2e       	mov	r14, r24
     4cc:	81 e0       	ldi	r24, 0x01	; 1
     4ce:	f8 2e       	mov	r15, r24
     4d0:	20 e0       	ldi	r18, 0x00	; 0
     4d2:	30 e0       	ldi	r19, 0x00	; 0
     4d4:	a9 01       	movw	r20, r18
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	cb 01       	movw	r24, r22
     4dc:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <async>
	return 0;
     4e0:	80 e0       	ldi	r24, 0x00	; 0
     4e2:	90 e0       	ldi	r25, 0x00	; 0
     4e4:	1f 91       	pop	r17
     4e6:	0f 91       	pop	r16
     4e8:	ff 90       	pop	r15
     4ea:	ef 90       	pop	r14
     4ec:	df 90       	pop	r13
     4ee:	cf 90       	pop	r12
     4f0:	08 95       	ret

000004f2 <removeOldChar.part.0>:
};

// Switches between two segments 
void switchSegment() {
    LCDDR13 = !(LCDDR13 & 1);
    LCDDR18 = !(LCDDR18 & 1);
     4f2:	fc 01       	movw	r30, r24
     4f4:	20 81       	ld	r18, Z
     4f6:	29 70       	andi	r18, 0x09	; 9
     4f8:	20 83       	st	Z, r18
     4fa:	35 96       	adiw	r30, 0x05	; 5
     4fc:	9c 01       	movw	r18, r24
     4fe:	2c 5e       	subi	r18, 0xEC	; 236
     500:	3f 4f       	sbci	r19, 0xFF	; 255
     502:	90 81       	ld	r25, Z
     504:	9f 70       	andi	r25, 0x0F	; 15
     506:	90 83       	st	Z, r25
     508:	35 96       	adiw	r30, 0x05	; 5
     50a:	e2 17       	cp	r30, r18
     50c:	f3 07       	cpc	r31, r19
     50e:	c9 f7       	brne	.-14     	; 0x502 <__stack+0x3>
     510:	08 95       	ret

00000512 <displayChar>:
     512:	cf 93       	push	r28
     514:	df 93       	push	r29
     516:	00 d0       	rcall	.+0      	; 0x518 <displayChar+0x6>
     518:	00 d0       	rcall	.+0      	; 0x51a <displayChar+0x8>
     51a:	cd b7       	in	r28, 0x3d	; 61
     51c:	de b7       	in	r29, 0x3e	; 62
     51e:	da 01       	movw	r26, r20
     520:	90 ed       	ldi	r25, 0xD0	; 208
     522:	98 0f       	add	r25, r24
     524:	9a 30       	cpi	r25, 0x0A	; 10
     526:	e8 f1       	brcs	.+122    	; 0x5a2 <displayChar+0x90>
     528:	89 e0       	ldi	r24, 0x09	; 9
     52a:	89 83       	std	Y+1, r24	; 0x01
     52c:	8f e0       	ldi	r24, 0x0F	; 15
     52e:	8a 83       	std	Y+2, r24	; 0x02
     530:	8b 83       	std	Y+3, r24	; 0x03
     532:	8c 83       	std	Y+4, r24	; 0x04
     534:	99 e0       	ldi	r25, 0x09	; 9
     536:	66 23       	and	r22, r22
     538:	99 f0       	breq	.+38     	; 0x560 <displayChar+0x4e>
     53a:	fe 01       	movw	r30, r28
     53c:	31 96       	adiw	r30, 0x01	; 1
     53e:	9e 01       	movw	r18, r28
     540:	2b 5f       	subi	r18, 0xFB	; 251
     542:	3f 4f       	sbci	r19, 0xFF	; 255
     544:	92 95       	swap	r25
     546:	90 7f       	andi	r25, 0xF0	; 240
     548:	91 93       	st	Z+, r25
     54a:	2e 17       	cp	r18, r30
     54c:	3f 07       	cpc	r19, r31
     54e:	39 f0       	breq	.+14     	; 0x55e <displayChar+0x4c>
     550:	90 81       	ld	r25, Z
     552:	92 95       	swap	r25
     554:	90 7f       	andi	r25, 0xF0	; 240
     556:	91 93       	st	Z+, r25
     558:	2e 17       	cp	r18, r30
     55a:	3f 07       	cpc	r19, r31
     55c:	c9 f7       	brne	.-14     	; 0x550 <displayChar+0x3e>
     55e:	99 81       	ldd	r25, Y+1	; 0x01
     560:	8c 91       	ld	r24, X
     562:	98 2b       	or	r25, r24
     564:	9c 93       	st	X, r25
     566:	15 96       	adiw	r26, 0x05	; 5
     568:	9c 91       	ld	r25, X
     56a:	15 97       	sbiw	r26, 0x05	; 5
     56c:	8a 81       	ldd	r24, Y+2	; 0x02
     56e:	89 2b       	or	r24, r25
     570:	15 96       	adiw	r26, 0x05	; 5
     572:	8c 93       	st	X, r24
     574:	15 97       	sbiw	r26, 0x05	; 5
     576:	1a 96       	adiw	r26, 0x0a	; 10
     578:	9c 91       	ld	r25, X
     57a:	1a 97       	sbiw	r26, 0x0a	; 10
     57c:	8b 81       	ldd	r24, Y+3	; 0x03
     57e:	89 2b       	or	r24, r25
     580:	1a 96       	adiw	r26, 0x0a	; 10
     582:	8c 93       	st	X, r24
     584:	1a 97       	sbiw	r26, 0x0a	; 10
     586:	1f 96       	adiw	r26, 0x0f	; 15
     588:	9c 91       	ld	r25, X
     58a:	1f 97       	sbiw	r26, 0x0f	; 15
     58c:	8c 81       	ldd	r24, Y+4	; 0x04
     58e:	89 2b       	or	r24, r25
     590:	1f 96       	adiw	r26, 0x0f	; 15
     592:	8c 93       	st	X, r24
     594:	0f 90       	pop	r0
     596:	0f 90       	pop	r0
     598:	0f 90       	pop	r0
     59a:	0f 90       	pop	r0
     59c:	df 91       	pop	r29
     59e:	cf 91       	pop	r28
     5a0:	08 95       	ret
     5a2:	e8 2f       	mov	r30, r24
     5a4:	f0 e0       	ldi	r31, 0x00	; 0
     5a6:	ee 0f       	add	r30, r30
     5a8:	ff 1f       	adc	r31, r31
     5aa:	ee 0f       	add	r30, r30
     5ac:	ff 1f       	adc	r31, r31
     5ae:	e8 5b       	subi	r30, 0xB8	; 184
     5b0:	ff 4f       	sbci	r31, 0xFF	; 255
     5b2:	90 81       	ld	r25, Z
     5b4:	99 83       	std	Y+1, r25	; 0x01
     5b6:	81 81       	ldd	r24, Z+1	; 0x01
     5b8:	8a 83       	std	Y+2, r24	; 0x02
     5ba:	82 81       	ldd	r24, Z+2	; 0x02
     5bc:	8b 83       	std	Y+3, r24	; 0x03
     5be:	83 81       	ldd	r24, Z+3	; 0x03
     5c0:	8c 83       	std	Y+4, r24	; 0x04
     5c2:	b9 cf       	rjmp	.-142    	; 0x536 <displayChar+0x24>

000005c4 <writeChar>:
     5c4:	0f 93       	push	r16
     5c6:	1f 93       	push	r17
     5c8:	cf 93       	push	r28
     5ca:	60 fd       	sbrc	r22, 0
     5cc:	1c c0       	rjmp	.+56     	; 0x606 <writeChar+0x42>
     5ce:	77 fd       	sbrc	r23, 7
     5d0:	30 c0       	rjmp	.+96     	; 0x632 <writeChar+0x6e>
     5d2:	75 95       	asr	r23
     5d4:	67 95       	ror	r22
     5d6:	ab 01       	movw	r20, r22
     5d8:	44 51       	subi	r20, 0x14	; 20
     5da:	5f 4f       	sbci	r21, 0xFF	; 255
     5dc:	fa 01       	movw	r30, r20
     5de:	90 81       	ld	r25, Z
     5e0:	90 79       	andi	r25, 0x90	; 144
     5e2:	90 83       	st	Z, r25
     5e4:	35 96       	adiw	r30, 0x05	; 5
     5e6:	9a 01       	movw	r18, r20
     5e8:	2c 5e       	subi	r18, 0xEC	; 236
     5ea:	3f 4f       	sbci	r19, 0xFF	; 255
     5ec:	90 81       	ld	r25, Z
     5ee:	90 7f       	andi	r25, 0xF0	; 240
     5f0:	90 83       	st	Z, r25
     5f2:	35 96       	adiw	r30, 0x05	; 5
     5f4:	e2 17       	cp	r30, r18
     5f6:	f3 07       	cpc	r31, r19
     5f8:	c9 f7       	brne	.-14     	; 0x5ec <writeChar+0x28>
     5fa:	60 e0       	ldi	r22, 0x00	; 0
     5fc:	cf 91       	pop	r28
     5fe:	1f 91       	pop	r17
     600:	0f 91       	pop	r16
     602:	0c 94 89 02 	jmp	0x512	; 0x512 <displayChar>
     606:	ab 01       	movw	r20, r22
     608:	41 50       	subi	r20, 0x01	; 1
     60a:	51 09       	sbc	r21, r1
     60c:	57 fd       	sbrc	r21, 7
     60e:	14 c0       	rjmp	.+40     	; 0x638 <writeChar+0x74>
     610:	c8 2f       	mov	r28, r24
     612:	55 95       	asr	r21
     614:	47 95       	ror	r20
     616:	8a 01       	movw	r16, r20
     618:	04 51       	subi	r16, 0x14	; 20
     61a:	1f 4f       	sbci	r17, 0xFF	; 255
     61c:	c8 01       	movw	r24, r16
     61e:	0e 94 79 02 	call	0x4f2	; 0x4f2 <removeOldChar.part.0>
     622:	a8 01       	movw	r20, r16
     624:	61 e0       	ldi	r22, 0x01	; 1
     626:	8c 2f       	mov	r24, r28
     628:	cf 91       	pop	r28
     62a:	1f 91       	pop	r17
     62c:	0f 91       	pop	r16
     62e:	0c 94 89 02 	jmp	0x512	; 0x512 <displayChar>
     632:	6f 5f       	subi	r22, 0xFF	; 255
     634:	7f 4f       	sbci	r23, 0xFF	; 255
     636:	cd cf       	rjmp	.-102    	; 0x5d2 <writeChar+0xe>
     638:	ab 01       	movw	r20, r22
     63a:	ea cf       	rjmp	.-44     	; 0x610 <writeChar+0x4c>

0000063c <printAt>:
}
 
// Displays last two digits of num in pos and pos+1
int  printAt(Lcd *self, int input) {  // [pos, num]
     63c:	ef 92       	push	r14
     63e:	ff 92       	push	r15
     640:	0f 93       	push	r16
     642:	1f 93       	push	r17
     644:	cf 93       	push	r28
     646:	df 93       	push	r29
     648:	cb 01       	movw	r24, r22
    int pp = input % 10;
     64a:	0a e0       	ldi	r16, 0x0A	; 10
     64c:	10 e0       	ldi	r17, 0x00	; 0
     64e:	b8 01       	movw	r22, r16
     650:	0e 94 6f 10 	call	0x20de	; 0x20de <__divmodhi4>
     654:	7b 01       	movw	r14, r22
     656:	ec 01       	movw	r28, r24
    int num = input / 10;
    writeChar((num % 100) / 10 + '0', pp);
     658:	cb 01       	movw	r24, r22
     65a:	64 e6       	ldi	r22, 0x64	; 100
     65c:	70 e0       	ldi	r23, 0x00	; 0
     65e:	0e 94 6f 10 	call	0x20de	; 0x20de <__divmodhi4>
     662:	b8 01       	movw	r22, r16
     664:	0e 94 6f 10 	call	0x20de	; 0x20de <__divmodhi4>
     668:	86 2f       	mov	r24, r22
     66a:	be 01       	movw	r22, r28
     66c:	80 5d       	subi	r24, 0xD0	; 208
     66e:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <writeChar>
    pp++;
    writeChar( num % 10 + '0', pp);
     672:	21 96       	adiw	r28, 0x01	; 1
     674:	c7 01       	movw	r24, r14
     676:	b8 01       	movw	r22, r16
     678:	0e 94 6f 10 	call	0x20de	; 0x20de <__divmodhi4>
     67c:	be 01       	movw	r22, r28
     67e:	80 5d       	subi	r24, 0xD0	; 208
     680:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <writeChar>

    return 0;
     684:	80 e0       	ldi	r24, 0x00	; 0
     686:	90 e0       	ldi	r25, 0x00	; 0
     688:	df 91       	pop	r29
     68a:	cf 91       	pop	r28
     68c:	1f 91       	pop	r17
     68e:	0f 91       	pop	r16
     690:	ff 90       	pop	r15
     692:	ef 90       	pop	r14
     694:	08 95       	ret

00000696 <main>:
#include "Communication.h"
#include "Lcd.h"
#include "TinyTimber.h"
#include "InterruptHandler.h"

int main(void) {
     696:	cf 93       	push	r28
     698:	df 93       	push	r29
     69a:	cd b7       	in	r28, 0x3d	; 61
     69c:	de b7       	in	r29, 0x3e	; 62
     69e:	a0 97       	sbiw	r28, 0x20	; 32
     6a0:	0f b6       	in	r0, 0x3f	; 63
     6a2:	f8 94       	cli
     6a4:	de bf       	out	0x3e, r29	; 62
     6a6:	0f be       	out	0x3f, r0	; 63
     6a8:	cd bf       	out	0x3d, r28	; 61
    Init();
     6aa:	0e 94 3e 02 	call	0x47c	; 0x47c <Init>
	Lcd lcd = initLcd();
     6ae:	1e 8e       	std	Y+30, r1	; 0x1e
     6b0:	1d 8e       	std	Y+29, r1	; 0x1d
     6b2:	18 a2       	std	Y+32, r1	; 0x20
     6b4:	1f 8e       	std	Y+31, r1	; 0x1f
	Communication com = initCommunication();
     6b6:	1a 8e       	std	Y+26, r1	; 0x1a
     6b8:	19 8e       	std	Y+25, r1	; 0x19
     6ba:	1c 8e       	std	Y+28, r1	; 0x1c
     6bc:	1b 8e       	std	Y+27, r1	; 0x1b
	Handler handler = initHandler(&com, &lcd);
     6be:	1a 82       	std	Y+2, r1	; 0x02
     6c0:	19 82       	std	Y+1, r1	; 0x01
     6c2:	1c 82       	std	Y+4, r1	; 0x04
     6c4:	1b 82       	std	Y+3, r1	; 0x03
     6c6:	ce 01       	movw	r24, r28
     6c8:	49 96       	adiw	r24, 0x19	; 25
     6ca:	9e 83       	std	Y+6, r25	; 0x06
     6cc:	8d 83       	std	Y+5, r24	; 0x05
     6ce:	04 96       	adiw	r24, 0x04	; 4
     6d0:	98 87       	std	Y+8, r25	; 0x08
     6d2:	8f 83       	std	Y+7, r24	; 0x07
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	90 e0       	ldi	r25, 0x00	; 0
     6d8:	9a 87       	std	Y+10, r25	; 0x0a
     6da:	89 87       	std	Y+9, r24	; 0x09
     6dc:	1c 86       	std	Y+12, r1	; 0x0c
     6de:	1b 86       	std	Y+11, r1	; 0x0b
     6e0:	1e 86       	std	Y+14, r1	; 0x0e
     6e2:	1d 86       	std	Y+13, r1	; 0x0d
     6e4:	18 8a       	std	Y+16, r1	; 0x10
     6e6:	1f 86       	std	Y+15, r1	; 0x0f
     6e8:	1a 8a       	std	Y+18, r1	; 0x12
     6ea:	19 8a       	std	Y+17, r1	; 0x11
	InterruptHandler interruptHandler = initInterruptHandler(&handler);
     6ec:	1c 8a       	std	Y+20, r1	; 0x14
     6ee:	1b 8a       	std	Y+19, r1	; 0x13
     6f0:	1e 8a       	std	Y+22, r1	; 0x16
     6f2:	1d 8a       	std	Y+21, r1	; 0x15
     6f4:	ce 01       	movw	r24, r28
     6f6:	01 96       	adiw	r24, 0x01	; 1
     6f8:	98 8f       	std	Y+24, r25	; 0x18
     6fa:	8f 8b       	std	Y+23, r24	; 0x17
	INSTALL(&interruptHandler, interrupter, IRQ_USART0_RX);
     6fc:	48 e0       	ldi	r20, 0x08	; 8
     6fe:	68 e5       	ldi	r22, 0x58	; 88
     700:	72 e0       	ldi	r23, 0x02	; 2
     702:	42 96       	adiw	r24, 0x12	; 18
     704:	0e 94 39 10 	call	0x2072	; 0x2072 <install>
	return tinytimber(NULL, NULL, NULL);
     708:	40 e0       	ldi	r20, 0x00	; 0
     70a:	50 e0       	ldi	r21, 0x00	; 0
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	70 e0       	ldi	r23, 0x00	; 0
     710:	80 e0       	ldi	r24, 0x00	; 0
     712:	90 e0       	ldi	r25, 0x00	; 0
     714:	0e 94 53 10 	call	0x20a6	; 0x20a6 <tinytimber>
}
     718:	a0 96       	adiw	r28, 0x20	; 32
     71a:	0f b6       	in	r0, 0x3f	; 63
     71c:	f8 94       	cli
     71e:	de bf       	out	0x3e, r29	; 62
     720:	0f be       	out	0x3f, r0	; 63
     722:	cd bf       	out	0x3d, r28	; 61
     724:	df 91       	pop	r29
     726:	cf 91       	pop	r28
     728:	08 95       	ret

0000072a <initialize>:
    char status;
    Time now;
    DISABLE(status);
    TIMERGET(now);
    ENABLE(status);
    return now - (status ? current->msg->baseline : timestamp);
     72a:	cf 93       	push	r28
     72c:	df 93       	push	r29
     72e:	00 d0       	rcall	.+0      	; 0x730 <initialize+0x6>
     730:	00 d0       	rcall	.+0      	; 0x732 <initialize+0x8>
     732:	cd b7       	in	r28, 0x3d	; 61
     734:	de b7       	in	r29, 0x3e	; 62
     736:	8b e2       	ldi	r24, 0x2B	; 43
     738:	92 e0       	ldi	r25, 0x02	; 2
     73a:	2b e0       	ldi	r18, 0x0B	; 11
     73c:	33 e0       	ldi	r19, 0x03	; 3
     73e:	fc 01       	movw	r30, r24
     740:	70 97       	sbiw	r30, 0x10	; 16
     742:	91 83       	std	Z+1, r25	; 0x01
     744:	80 83       	st	Z, r24
     746:	40 96       	adiw	r24, 0x10	; 16
     748:	82 17       	cp	r24, r18
     74a:	93 07       	cpc	r25, r19
     74c:	c1 f7       	brne	.-16     	; 0x73e <initialize+0x14>
     74e:	10 92 fc 02 	sts	0x02FC, r1	; 0x8002fc <messages+0xe1>
     752:	10 92 fb 02 	sts	0x02FB, r1	; 0x8002fb <messages+0xe0>
     756:	e6 e6       	ldi	r30, 0x66	; 102
     758:	f1 e0       	ldi	r31, 0x01	; 1
     75a:	83 e8       	ldi	r24, 0x83	; 131
     75c:	91 e0       	ldi	r25, 0x01	; 1
     75e:	91 83       	std	Z+1, r25	; 0x01
     760:	80 83       	st	Z, r24
     762:	80 ea       	ldi	r24, 0xA0	; 160
     764:	91 e0       	ldi	r25, 0x01	; 1
     766:	96 8f       	std	Z+30, r25	; 0x1e
     768:	85 8f       	std	Z+29, r24	; 0x1d
     76a:	ad eb       	ldi	r26, 0xBD	; 189
     76c:	b1 e0       	ldi	r27, 0x01	; 1
     76e:	b3 af       	std	Z+59, r27	; 0x3b
     770:	a2 af       	std	Z+58, r26	; 0x3a
     772:	1d 92       	st	X+, r1
     774:	1c 92       	st	X, r1
     776:	fa 83       	std	Y+2, r31	; 0x02
     778:	e9 83       	std	Y+1, r30	; 0x01
     77a:	e7 e6       	ldi	r30, 0x67	; 103
     77c:	f3 e0       	ldi	r31, 0x03	; 3
     77e:	fc 83       	std	Y+4, r31	; 0x04
     780:	eb 83       	std	Y+3, r30	; 0x03
     782:	89 81       	ldd	r24, Y+1	; 0x01
     784:	9a 81       	ldd	r25, Y+2	; 0x02
     786:	06 96       	adiw	r24, 0x06	; 6
     788:	0e 94 97 10 	call	0x212e	; 0x212e <setjmp>
     78c:	8b 81       	ldd	r24, Y+3	; 0x03
     78e:	9c 81       	ldd	r25, Y+4	; 0x04
     790:	e9 81       	ldd	r30, Y+1	; 0x01
     792:	fa 81       	ldd	r31, Y+2	; 0x02
     794:	97 8b       	std	Z+23, r25	; 0x17
     796:	86 8b       	std	Z+22, r24	; 0x16
     798:	91 8f       	std	Z+25, r25	; 0x19
     79a:	80 8f       	std	Z+24, r24	; 0x18
     79c:	88 e3       	ldi	r24, 0x38	; 56
     79e:	9f e0       	ldi	r25, 0x0F	; 15
     7a0:	94 8f       	std	Z+28, r25	; 0x1c
     7a2:	83 8f       	std	Z+27, r24	; 0x1b
     7a4:	15 82       	std	Z+5, r1	; 0x05
     7a6:	14 82       	std	Z+4, r1	; 0x04
     7a8:	7d 96       	adiw	r30, 0x1d	; 29
     7aa:	fa 83       	std	Y+2, r31	; 0x02
     7ac:	e9 83       	std	Y+1, r30	; 0x01
     7ae:	eb 81       	ldd	r30, Y+3	; 0x03
     7b0:	fc 81       	ldd	r31, Y+4	; 0x04
     7b2:	e0 5a       	subi	r30, 0xA0	; 160
     7b4:	ff 4f       	sbci	r31, 0xFF	; 255
     7b6:	fc 83       	std	Y+4, r31	; 0x04
     7b8:	eb 83       	std	Y+3, r30	; 0x03
     7ba:	89 81       	ldd	r24, Y+1	; 0x01
     7bc:	9a 81       	ldd	r25, Y+2	; 0x02
     7be:	8a 5d       	subi	r24, 0xDA	; 218
     7c0:	91 40       	sbci	r25, 0x01	; 1
     7c2:	f9 f6       	brne	.-66     	; 0x782 <initialize+0x58>
     7c4:	ee ef       	ldi	r30, 0xFE	; 254
     7c6:	f1 e0       	ldi	r31, 0x01	; 1
     7c8:	11 82       	std	Z+1, r1	; 0x01
     7ca:	10 82       	st	Z, r1
     7cc:	15 82       	std	Z+5, r1	; 0x05
     7ce:	14 82       	std	Z+4, r1	; 0x04
     7d0:	13 82       	std	Z+3, r1	; 0x03
     7d2:	12 82       	std	Z+2, r1	; 0x02
     7d4:	e1 e6       	ldi	r30, 0x61	; 97
     7d6:	f0 e0       	ldi	r31, 0x00	; 0
     7d8:	80 e8       	ldi	r24, 0x80	; 128
     7da:	80 83       	st	Z, r24
     7dc:	10 82       	st	Z, r1
     7de:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     7e2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     7e6:	84 e0       	ldi	r24, 0x04	; 4
     7e8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     7ec:	81 e0       	ldi	r24, 0x01	; 1
     7ee:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
     7f2:	0f 90       	pop	r0
     7f4:	0f 90       	pop	r0
     7f6:	0f 90       	pop	r0
     7f8:	0f 90       	pop	r0
     7fa:	df 91       	pop	r29
     7fc:	cf 91       	pop	r28
     7fe:	08 95       	ret

00000800 <dispatch>:
     800:	cf 93       	push	r28
     802:	df 93       	push	r29
     804:	00 d0       	rcall	.+0      	; 0x806 <dispatch+0x6>
     806:	cd b7       	in	r28, 0x3d	; 61
     808:	de b7       	in	r29, 0x3e	; 62
     80a:	9a 83       	std	Y+2, r25	; 0x02
     80c:	89 83       	std	Y+1, r24	; 0x01
     80e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     812:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     816:	06 96       	adiw	r24, 0x06	; 6
     818:	0e 94 97 10 	call	0x212e	; 0x212e <setjmp>
     81c:	89 2b       	or	r24, r25
     81e:	29 f0       	breq	.+10     	; 0x82a <dispatch+0x2a>
     820:	0f 90       	pop	r0
     822:	0f 90       	pop	r0
     824:	df 91       	pop	r29
     826:	cf 91       	pop	r28
     828:	08 95       	ret
     82a:	89 81       	ldd	r24, Y+1	; 0x01
     82c:	9a 81       	ldd	r25, Y+2	; 0x02
     82e:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     832:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
     836:	61 e0       	ldi	r22, 0x01	; 1
     838:	70 e0       	ldi	r23, 0x00	; 0
     83a:	06 96       	adiw	r24, 0x06	; 6
     83c:	0e 94 b7 10 	call	0x216e	; 0x216e <longjmp>

00000840 <schedule>:
     840:	0f 93       	push	r16
     842:	1f 93       	push	r17
     844:	cf 93       	push	r28
     846:	df 93       	push	r29
     848:	e0 91 3c 01 	lds	r30, 0x013C	; 0x80013c <msgQ>
     84c:	f0 91 3d 01 	lds	r31, 0x013D	; 0x80013d <msgQ+0x1>
     850:	30 97       	sbiw	r30, 0x00	; 0
     852:	f1 f0       	breq	.+60     	; 0x890 <schedule+0x50>
     854:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
     858:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
     85c:	00 97       	sbiw	r24, 0x00	; 0
     85e:	c1 f0       	breq	.+48     	; 0x890 <schedule+0x50>
     860:	c0 91 02 01 	lds	r28, 0x0102	; 0x800102 <activeStack>
     864:	d0 91 03 01 	lds	r29, 0x0103	; 0x800103 <activeStack+0x1>
     868:	aa 81       	ldd	r26, Y+2	; 0x02
     86a:	bb 81       	ldd	r27, Y+3	; 0x03
     86c:	10 97       	sbiw	r26, 0x00	; 0
     86e:	a9 f0       	breq	.+42     	; 0x89a <schedule+0x5a>
     870:	46 81       	ldd	r20, Z+6	; 0x06
     872:	57 81       	ldd	r21, Z+7	; 0x07
     874:	60 85       	ldd	r22, Z+8	; 0x08
     876:	71 85       	ldd	r23, Z+9	; 0x09
     878:	16 96       	adiw	r26, 0x06	; 6
     87a:	0d 91       	ld	r16, X+
     87c:	1d 91       	ld	r17, X+
     87e:	2d 91       	ld	r18, X+
     880:	3c 91       	ld	r19, X
     882:	19 97       	sbiw	r26, 0x09	; 9
     884:	40 1b       	sub	r20, r16
     886:	51 0b       	sbc	r21, r17
     888:	62 0b       	sbc	r22, r18
     88a:	73 0b       	sbc	r23, r19
     88c:	77 fd       	sbrc	r23, 7
     88e:	05 c0       	rjmp	.+10     	; 0x89a <schedule+0x5a>
     890:	df 91       	pop	r29
     892:	cf 91       	pop	r28
     894:	1f 91       	pop	r17
     896:	0f 91       	pop	r16
     898:	08 95       	ret
     89a:	fc 01       	movw	r30, r24
     89c:	20 81       	ld	r18, Z
     89e:	31 81       	ldd	r19, Z+1	; 0x01
     8a0:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
     8a4:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
     8a8:	d1 83       	std	Z+1, r29	; 0x01
     8aa:	c0 83       	st	Z, r28
     8ac:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
     8b0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
     8b4:	df 91       	pop	r29
     8b6:	cf 91       	pop	r28
     8b8:	1f 91       	pop	r17
     8ba:	0f 91       	pop	r16
     8bc:	0c 94 00 04 	jmp	0x800	; 0x800 <dispatch>

000008c0 <dequeue.part.0>:
     8c0:	8f ef       	ldi	r24, 0xFF	; 255
     8c2:	80 93 ec 00 	sts	0x00EC, r24	; 0x8000ec <__TEXT_REGION_LENGTH__+0x7fc0ec>
     8c6:	80 93 ed 00 	sts	0x00ED, r24	; 0x8000ed <__TEXT_REGION_LENGTH__+0x7fc0ed>
     8ca:	80 93 ee 00 	sts	0x00EE, r24	; 0x8000ee <__TEXT_REGION_LENGTH__+0x7fc0ee>
     8ce:	81 e0       	ldi	r24, 0x01	; 1
     8d0:	83 bf       	out	0x33, r24	; 51
     8d2:	88 95       	sleep
     8d4:	fd cf       	rjmp	.-6      	; 0x8d0 <dequeue.part.0+0x10>

000008d6 <__vector_1>:
     8d6:	1f 92       	push	r1
     8d8:	0f 92       	push	r0
     8da:	0f b6       	in	r0, 0x3f	; 63
     8dc:	0f 92       	push	r0
     8de:	11 24       	eor	r1, r1
     8e0:	2f 93       	push	r18
     8e2:	3f 93       	push	r19
     8e4:	4f 93       	push	r20
     8e6:	5f 93       	push	r21
     8e8:	6f 93       	push	r22
     8ea:	7f 93       	push	r23
     8ec:	8f 93       	push	r24
     8ee:	9f 93       	push	r25
     8f0:	af 93       	push	r26
     8f2:	bf 93       	push	r27
     8f4:	ef 93       	push	r30
     8f6:	ff 93       	push	r31
     8f8:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__data_end>
     8fc:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__data_end+0x1>
     900:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     904:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     908:	c9 01       	movw	r24, r18
     90a:	03 2e       	mov	r0, r19
     90c:	00 0c       	add	r0, r0
     90e:	aa 0b       	sbc	r26, r26
     910:	bb 0b       	sbc	r27, r27
     912:	dc 01       	movw	r26, r24
     914:	99 27       	eor	r25, r25
     916:	88 27       	eor	r24, r24
     918:	60 e0       	ldi	r22, 0x00	; 0
     91a:	70 e0       	ldi	r23, 0x00	; 0
     91c:	84 2b       	or	r24, r20
     91e:	95 2b       	or	r25, r21
     920:	a6 2b       	or	r26, r22
     922:	b7 2b       	or	r27, r23
     924:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     928:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     92c:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     930:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     934:	b0 9b       	sbis	0x16, 0	; 22
     936:	1b c0       	rjmp	.+54     	; 0x96e <__vector_1+0x98>
     938:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     93c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     940:	c9 01       	movw	r24, r18
     942:	01 96       	adiw	r24, 0x01	; 1
     944:	09 2e       	mov	r0, r25
     946:	00 0c       	add	r0, r0
     948:	aa 0b       	sbc	r26, r26
     94a:	bb 0b       	sbc	r27, r27
     94c:	dc 01       	movw	r26, r24
     94e:	99 27       	eor	r25, r25
     950:	88 27       	eor	r24, r24
     952:	60 e0       	ldi	r22, 0x00	; 0
     954:	70 e0       	ldi	r23, 0x00	; 0
     956:	84 2b       	or	r24, r20
     958:	95 2b       	or	r25, r21
     95a:	a6 2b       	or	r26, r22
     95c:	b7 2b       	or	r27, r23
     95e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     962:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     966:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     96a:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     96e:	e0 91 da 01 	lds	r30, 0x01DA	; 0x8001da <mtable>
     972:	f0 91 db 01 	lds	r31, 0x01DB	; 0x8001db <mtable+0x1>
     976:	30 97       	sbiw	r30, 0x00	; 0
     978:	39 f0       	breq	.+14     	; 0x988 <__vector_1+0xb2>
     97a:	60 e0       	ldi	r22, 0x00	; 0
     97c:	70 e0       	ldi	r23, 0x00	; 0
     97e:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <otable>
     982:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <otable+0x1>
     986:	09 95       	icall
     988:	0e 94 20 04 	call	0x840	; 0x840 <schedule>
     98c:	ff 91       	pop	r31
     98e:	ef 91       	pop	r30
     990:	bf 91       	pop	r27
     992:	af 91       	pop	r26
     994:	9f 91       	pop	r25
     996:	8f 91       	pop	r24
     998:	7f 91       	pop	r23
     99a:	6f 91       	pop	r22
     99c:	5f 91       	pop	r21
     99e:	4f 91       	pop	r20
     9a0:	3f 91       	pop	r19
     9a2:	2f 91       	pop	r18
     9a4:	0f 90       	pop	r0
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	0f 90       	pop	r0
     9aa:	1f 90       	pop	r1
     9ac:	18 95       	reti

000009ae <__vector_2>:
     9ae:	1f 92       	push	r1
     9b0:	0f 92       	push	r0
     9b2:	0f b6       	in	r0, 0x3f	; 63
     9b4:	0f 92       	push	r0
     9b6:	11 24       	eor	r1, r1
     9b8:	2f 93       	push	r18
     9ba:	3f 93       	push	r19
     9bc:	4f 93       	push	r20
     9be:	5f 93       	push	r21
     9c0:	6f 93       	push	r22
     9c2:	7f 93       	push	r23
     9c4:	8f 93       	push	r24
     9c6:	9f 93       	push	r25
     9c8:	af 93       	push	r26
     9ca:	bf 93       	push	r27
     9cc:	ef 93       	push	r30
     9ce:	ff 93       	push	r31
     9d0:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__data_end>
     9d4:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__data_end+0x1>
     9d8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     9dc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     9e0:	c9 01       	movw	r24, r18
     9e2:	03 2e       	mov	r0, r19
     9e4:	00 0c       	add	r0, r0
     9e6:	aa 0b       	sbc	r26, r26
     9e8:	bb 0b       	sbc	r27, r27
     9ea:	dc 01       	movw	r26, r24
     9ec:	99 27       	eor	r25, r25
     9ee:	88 27       	eor	r24, r24
     9f0:	60 e0       	ldi	r22, 0x00	; 0
     9f2:	70 e0       	ldi	r23, 0x00	; 0
     9f4:	84 2b       	or	r24, r20
     9f6:	95 2b       	or	r25, r21
     9f8:	a6 2b       	or	r26, r22
     9fa:	b7 2b       	or	r27, r23
     9fc:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     a00:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     a04:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     a08:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     a0c:	b0 9b       	sbis	0x16, 0	; 22
     a0e:	1b c0       	rjmp	.+54     	; 0xa46 <__vector_2+0x98>
     a10:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     a14:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     a18:	c9 01       	movw	r24, r18
     a1a:	01 96       	adiw	r24, 0x01	; 1
     a1c:	09 2e       	mov	r0, r25
     a1e:	00 0c       	add	r0, r0
     a20:	aa 0b       	sbc	r26, r26
     a22:	bb 0b       	sbc	r27, r27
     a24:	dc 01       	movw	r26, r24
     a26:	99 27       	eor	r25, r25
     a28:	88 27       	eor	r24, r24
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	70 e0       	ldi	r23, 0x00	; 0
     a2e:	84 2b       	or	r24, r20
     a30:	95 2b       	or	r25, r21
     a32:	a6 2b       	or	r26, r22
     a34:	b7 2b       	or	r27, r23
     a36:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     a3a:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     a3e:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     a42:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     a46:	e0 91 dc 01 	lds	r30, 0x01DC	; 0x8001dc <mtable+0x2>
     a4a:	f0 91 dd 01 	lds	r31, 0x01DD	; 0x8001dd <mtable+0x3>
     a4e:	30 97       	sbiw	r30, 0x00	; 0
     a50:	39 f0       	breq	.+14     	; 0xa60 <__vector_2+0xb2>
     a52:	61 e0       	ldi	r22, 0x01	; 1
     a54:	70 e0       	ldi	r23, 0x00	; 0
     a56:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <otable+0x2>
     a5a:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <otable+0x3>
     a5e:	09 95       	icall
     a60:	0e 94 20 04 	call	0x840	; 0x840 <schedule>
     a64:	ff 91       	pop	r31
     a66:	ef 91       	pop	r30
     a68:	bf 91       	pop	r27
     a6a:	af 91       	pop	r26
     a6c:	9f 91       	pop	r25
     a6e:	8f 91       	pop	r24
     a70:	7f 91       	pop	r23
     a72:	6f 91       	pop	r22
     a74:	5f 91       	pop	r21
     a76:	4f 91       	pop	r20
     a78:	3f 91       	pop	r19
     a7a:	2f 91       	pop	r18
     a7c:	0f 90       	pop	r0
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	0f 90       	pop	r0
     a82:	1f 90       	pop	r1
     a84:	18 95       	reti

00000a86 <__vector_3>:
     a86:	1f 92       	push	r1
     a88:	0f 92       	push	r0
     a8a:	0f b6       	in	r0, 0x3f	; 63
     a8c:	0f 92       	push	r0
     a8e:	11 24       	eor	r1, r1
     a90:	2f 93       	push	r18
     a92:	3f 93       	push	r19
     a94:	4f 93       	push	r20
     a96:	5f 93       	push	r21
     a98:	6f 93       	push	r22
     a9a:	7f 93       	push	r23
     a9c:	8f 93       	push	r24
     a9e:	9f 93       	push	r25
     aa0:	af 93       	push	r26
     aa2:	bf 93       	push	r27
     aa4:	ef 93       	push	r30
     aa6:	ff 93       	push	r31
     aa8:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__data_end>
     aac:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__data_end+0x1>
     ab0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ab4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ab8:	c9 01       	movw	r24, r18
     aba:	03 2e       	mov	r0, r19
     abc:	00 0c       	add	r0, r0
     abe:	aa 0b       	sbc	r26, r26
     ac0:	bb 0b       	sbc	r27, r27
     ac2:	dc 01       	movw	r26, r24
     ac4:	99 27       	eor	r25, r25
     ac6:	88 27       	eor	r24, r24
     ac8:	60 e0       	ldi	r22, 0x00	; 0
     aca:	70 e0       	ldi	r23, 0x00	; 0
     acc:	84 2b       	or	r24, r20
     ace:	95 2b       	or	r25, r21
     ad0:	a6 2b       	or	r26, r22
     ad2:	b7 2b       	or	r27, r23
     ad4:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     ad8:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     adc:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     ae0:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     ae4:	b0 9b       	sbis	0x16, 0	; 22
     ae6:	1b c0       	rjmp	.+54     	; 0xb1e <__vector_3+0x98>
     ae8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     aec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     af0:	c9 01       	movw	r24, r18
     af2:	01 96       	adiw	r24, 0x01	; 1
     af4:	09 2e       	mov	r0, r25
     af6:	00 0c       	add	r0, r0
     af8:	aa 0b       	sbc	r26, r26
     afa:	bb 0b       	sbc	r27, r27
     afc:	dc 01       	movw	r26, r24
     afe:	99 27       	eor	r25, r25
     b00:	88 27       	eor	r24, r24
     b02:	60 e0       	ldi	r22, 0x00	; 0
     b04:	70 e0       	ldi	r23, 0x00	; 0
     b06:	84 2b       	or	r24, r20
     b08:	95 2b       	or	r25, r21
     b0a:	a6 2b       	or	r26, r22
     b0c:	b7 2b       	or	r27, r23
     b0e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     b12:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     b16:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     b1a:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     b1e:	e0 91 de 01 	lds	r30, 0x01DE	; 0x8001de <mtable+0x4>
     b22:	f0 91 df 01 	lds	r31, 0x01DF	; 0x8001df <mtable+0x5>
     b26:	30 97       	sbiw	r30, 0x00	; 0
     b28:	39 f0       	breq	.+14     	; 0xb38 <__vector_3+0xb2>
     b2a:	62 e0       	ldi	r22, 0x02	; 2
     b2c:	70 e0       	ldi	r23, 0x00	; 0
     b2e:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <otable+0x4>
     b32:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <otable+0x5>
     b36:	09 95       	icall
     b38:	0e 94 20 04 	call	0x840	; 0x840 <schedule>
     b3c:	ff 91       	pop	r31
     b3e:	ef 91       	pop	r30
     b40:	bf 91       	pop	r27
     b42:	af 91       	pop	r26
     b44:	9f 91       	pop	r25
     b46:	8f 91       	pop	r24
     b48:	7f 91       	pop	r23
     b4a:	6f 91       	pop	r22
     b4c:	5f 91       	pop	r21
     b4e:	4f 91       	pop	r20
     b50:	3f 91       	pop	r19
     b52:	2f 91       	pop	r18
     b54:	0f 90       	pop	r0
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	0f 90       	pop	r0
     b5a:	1f 90       	pop	r1
     b5c:	18 95       	reti

00000b5e <__vector_4>:
     b5e:	1f 92       	push	r1
     b60:	0f 92       	push	r0
     b62:	0f b6       	in	r0, 0x3f	; 63
     b64:	0f 92       	push	r0
     b66:	11 24       	eor	r1, r1
     b68:	2f 93       	push	r18
     b6a:	3f 93       	push	r19
     b6c:	4f 93       	push	r20
     b6e:	5f 93       	push	r21
     b70:	6f 93       	push	r22
     b72:	7f 93       	push	r23
     b74:	8f 93       	push	r24
     b76:	9f 93       	push	r25
     b78:	af 93       	push	r26
     b7a:	bf 93       	push	r27
     b7c:	ef 93       	push	r30
     b7e:	ff 93       	push	r31
     b80:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__data_end>
     b84:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__data_end+0x1>
     b88:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     b8c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     b90:	c9 01       	movw	r24, r18
     b92:	03 2e       	mov	r0, r19
     b94:	00 0c       	add	r0, r0
     b96:	aa 0b       	sbc	r26, r26
     b98:	bb 0b       	sbc	r27, r27
     b9a:	dc 01       	movw	r26, r24
     b9c:	99 27       	eor	r25, r25
     b9e:	88 27       	eor	r24, r24
     ba0:	60 e0       	ldi	r22, 0x00	; 0
     ba2:	70 e0       	ldi	r23, 0x00	; 0
     ba4:	84 2b       	or	r24, r20
     ba6:	95 2b       	or	r25, r21
     ba8:	a6 2b       	or	r26, r22
     baa:	b7 2b       	or	r27, r23
     bac:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     bb0:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     bb4:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     bb8:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     bbc:	b0 9b       	sbis	0x16, 0	; 22
     bbe:	1b c0       	rjmp	.+54     	; 0xbf6 <__vector_4+0x98>
     bc0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     bc4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     bc8:	c9 01       	movw	r24, r18
     bca:	01 96       	adiw	r24, 0x01	; 1
     bcc:	09 2e       	mov	r0, r25
     bce:	00 0c       	add	r0, r0
     bd0:	aa 0b       	sbc	r26, r26
     bd2:	bb 0b       	sbc	r27, r27
     bd4:	dc 01       	movw	r26, r24
     bd6:	99 27       	eor	r25, r25
     bd8:	88 27       	eor	r24, r24
     bda:	60 e0       	ldi	r22, 0x00	; 0
     bdc:	70 e0       	ldi	r23, 0x00	; 0
     bde:	84 2b       	or	r24, r20
     be0:	95 2b       	or	r25, r21
     be2:	a6 2b       	or	r26, r22
     be4:	b7 2b       	or	r27, r23
     be6:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     bea:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     bee:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     bf2:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     bf6:	e0 91 e0 01 	lds	r30, 0x01E0	; 0x8001e0 <mtable+0x6>
     bfa:	f0 91 e1 01 	lds	r31, 0x01E1	; 0x8001e1 <mtable+0x7>
     bfe:	30 97       	sbiw	r30, 0x00	; 0
     c00:	39 f0       	breq	.+14     	; 0xc10 <__vector_4+0xb2>
     c02:	63 e0       	ldi	r22, 0x03	; 3
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <otable+0x6>
     c0a:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <otable+0x7>
     c0e:	09 95       	icall
     c10:	0e 94 20 04 	call	0x840	; 0x840 <schedule>
     c14:	ff 91       	pop	r31
     c16:	ef 91       	pop	r30
     c18:	bf 91       	pop	r27
     c1a:	af 91       	pop	r26
     c1c:	9f 91       	pop	r25
     c1e:	8f 91       	pop	r24
     c20:	7f 91       	pop	r23
     c22:	6f 91       	pop	r22
     c24:	5f 91       	pop	r21
     c26:	4f 91       	pop	r20
     c28:	3f 91       	pop	r19
     c2a:	2f 91       	pop	r18
     c2c:	0f 90       	pop	r0
     c2e:	0f be       	out	0x3f, r0	; 63
     c30:	0f 90       	pop	r0
     c32:	1f 90       	pop	r1
     c34:	18 95       	reti

00000c36 <__vector_5>:
     c36:	1f 92       	push	r1
     c38:	0f 92       	push	r0
     c3a:	0f b6       	in	r0, 0x3f	; 63
     c3c:	0f 92       	push	r0
     c3e:	11 24       	eor	r1, r1
     c40:	2f 93       	push	r18
     c42:	3f 93       	push	r19
     c44:	4f 93       	push	r20
     c46:	5f 93       	push	r21
     c48:	6f 93       	push	r22
     c4a:	7f 93       	push	r23
     c4c:	8f 93       	push	r24
     c4e:	9f 93       	push	r25
     c50:	af 93       	push	r26
     c52:	bf 93       	push	r27
     c54:	ef 93       	push	r30
     c56:	ff 93       	push	r31
     c58:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__data_end>
     c5c:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__data_end+0x1>
     c60:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c64:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     c68:	c9 01       	movw	r24, r18
     c6a:	03 2e       	mov	r0, r19
     c6c:	00 0c       	add	r0, r0
     c6e:	aa 0b       	sbc	r26, r26
     c70:	bb 0b       	sbc	r27, r27
     c72:	dc 01       	movw	r26, r24
     c74:	99 27       	eor	r25, r25
     c76:	88 27       	eor	r24, r24
     c78:	60 e0       	ldi	r22, 0x00	; 0
     c7a:	70 e0       	ldi	r23, 0x00	; 0
     c7c:	84 2b       	or	r24, r20
     c7e:	95 2b       	or	r25, r21
     c80:	a6 2b       	or	r26, r22
     c82:	b7 2b       	or	r27, r23
     c84:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     c88:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     c8c:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     c90:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     c94:	b0 9b       	sbis	0x16, 0	; 22
     c96:	1b c0       	rjmp	.+54     	; 0xcce <__vector_5+0x98>
     c98:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     c9c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ca0:	c9 01       	movw	r24, r18
     ca2:	01 96       	adiw	r24, 0x01	; 1
     ca4:	09 2e       	mov	r0, r25
     ca6:	00 0c       	add	r0, r0
     ca8:	aa 0b       	sbc	r26, r26
     caa:	bb 0b       	sbc	r27, r27
     cac:	dc 01       	movw	r26, r24
     cae:	99 27       	eor	r25, r25
     cb0:	88 27       	eor	r24, r24
     cb2:	60 e0       	ldi	r22, 0x00	; 0
     cb4:	70 e0       	ldi	r23, 0x00	; 0
     cb6:	84 2b       	or	r24, r20
     cb8:	95 2b       	or	r25, r21
     cba:	a6 2b       	or	r26, r22
     cbc:	b7 2b       	or	r27, r23
     cbe:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     cc2:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     cc6:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     cca:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     cce:	e0 91 e2 01 	lds	r30, 0x01E2	; 0x8001e2 <mtable+0x8>
     cd2:	f0 91 e3 01 	lds	r31, 0x01E3	; 0x8001e3 <mtable+0x9>
     cd6:	30 97       	sbiw	r30, 0x00	; 0
     cd8:	39 f0       	breq	.+14     	; 0xce8 <__vector_5+0xb2>
     cda:	64 e0       	ldi	r22, 0x04	; 4
     cdc:	70 e0       	ldi	r23, 0x00	; 0
     cde:	80 91 4a 01 	lds	r24, 0x014A	; 0x80014a <otable+0x8>
     ce2:	90 91 4b 01 	lds	r25, 0x014B	; 0x80014b <otable+0x9>
     ce6:	09 95       	icall
     ce8:	0e 94 20 04 	call	0x840	; 0x840 <schedule>
     cec:	ff 91       	pop	r31
     cee:	ef 91       	pop	r30
     cf0:	bf 91       	pop	r27
     cf2:	af 91       	pop	r26
     cf4:	9f 91       	pop	r25
     cf6:	8f 91       	pop	r24
     cf8:	7f 91       	pop	r23
     cfa:	6f 91       	pop	r22
     cfc:	5f 91       	pop	r21
     cfe:	4f 91       	pop	r20
     d00:	3f 91       	pop	r19
     d02:	2f 91       	pop	r18
     d04:	0f 90       	pop	r0
     d06:	0f be       	out	0x3f, r0	; 63
     d08:	0f 90       	pop	r0
     d0a:	1f 90       	pop	r1
     d0c:	18 95       	reti

00000d0e <__vector_10>:
     d0e:	1f 92       	push	r1
     d10:	0f 92       	push	r0
     d12:	0f b6       	in	r0, 0x3f	; 63
     d14:	0f 92       	push	r0
     d16:	11 24       	eor	r1, r1
     d18:	2f 93       	push	r18
     d1a:	3f 93       	push	r19
     d1c:	4f 93       	push	r20
     d1e:	5f 93       	push	r21
     d20:	6f 93       	push	r22
     d22:	7f 93       	push	r23
     d24:	8f 93       	push	r24
     d26:	9f 93       	push	r25
     d28:	af 93       	push	r26
     d2a:	bf 93       	push	r27
     d2c:	ef 93       	push	r30
     d2e:	ff 93       	push	r31
     d30:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__data_end>
     d34:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__data_end+0x1>
     d38:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d3c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d40:	c9 01       	movw	r24, r18
     d42:	03 2e       	mov	r0, r19
     d44:	00 0c       	add	r0, r0
     d46:	aa 0b       	sbc	r26, r26
     d48:	bb 0b       	sbc	r27, r27
     d4a:	dc 01       	movw	r26, r24
     d4c:	99 27       	eor	r25, r25
     d4e:	88 27       	eor	r24, r24
     d50:	60 e0       	ldi	r22, 0x00	; 0
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	84 2b       	or	r24, r20
     d56:	95 2b       	or	r25, r21
     d58:	a6 2b       	or	r26, r22
     d5a:	b7 2b       	or	r27, r23
     d5c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     d60:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     d64:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     d68:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     d6c:	b0 9b       	sbis	0x16, 0	; 22
     d6e:	1b c0       	rjmp	.+54     	; 0xda6 <__vector_10+0x98>
     d70:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     d74:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     d78:	c9 01       	movw	r24, r18
     d7a:	01 96       	adiw	r24, 0x01	; 1
     d7c:	09 2e       	mov	r0, r25
     d7e:	00 0c       	add	r0, r0
     d80:	aa 0b       	sbc	r26, r26
     d82:	bb 0b       	sbc	r27, r27
     d84:	dc 01       	movw	r26, r24
     d86:	99 27       	eor	r25, r25
     d88:	88 27       	eor	r24, r24
     d8a:	60 e0       	ldi	r22, 0x00	; 0
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	84 2b       	or	r24, r20
     d90:	95 2b       	or	r25, r21
     d92:	a6 2b       	or	r26, r22
     d94:	b7 2b       	or	r27, r23
     d96:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     d9a:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     d9e:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     da2:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     da6:	e0 91 e4 01 	lds	r30, 0x01E4	; 0x8001e4 <mtable+0xa>
     daa:	f0 91 e5 01 	lds	r31, 0x01E5	; 0x8001e5 <mtable+0xb>
     dae:	30 97       	sbiw	r30, 0x00	; 0
     db0:	39 f0       	breq	.+14     	; 0xdc0 <__vector_10+0xb2>
     db2:	65 e0       	ldi	r22, 0x05	; 5
     db4:	70 e0       	ldi	r23, 0x00	; 0
     db6:	80 91 4c 01 	lds	r24, 0x014C	; 0x80014c <otable+0xa>
     dba:	90 91 4d 01 	lds	r25, 0x014D	; 0x80014d <otable+0xb>
     dbe:	09 95       	icall
     dc0:	0e 94 20 04 	call	0x840	; 0x840 <schedule>
     dc4:	ff 91       	pop	r31
     dc6:	ef 91       	pop	r30
     dc8:	bf 91       	pop	r27
     dca:	af 91       	pop	r26
     dcc:	9f 91       	pop	r25
     dce:	8f 91       	pop	r24
     dd0:	7f 91       	pop	r23
     dd2:	6f 91       	pop	r22
     dd4:	5f 91       	pop	r21
     dd6:	4f 91       	pop	r20
     dd8:	3f 91       	pop	r19
     dda:	2f 91       	pop	r18
     ddc:	0f 90       	pop	r0
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	0f 90       	pop	r0
     de2:	1f 90       	pop	r1
     de4:	18 95       	reti

00000de6 <__vector_11>:
     de6:	1f 92       	push	r1
     de8:	0f 92       	push	r0
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	0f 92       	push	r0
     dee:	11 24       	eor	r1, r1
     df0:	2f 93       	push	r18
     df2:	3f 93       	push	r19
     df4:	4f 93       	push	r20
     df6:	5f 93       	push	r21
     df8:	6f 93       	push	r22
     dfa:	7f 93       	push	r23
     dfc:	8f 93       	push	r24
     dfe:	9f 93       	push	r25
     e00:	af 93       	push	r26
     e02:	bf 93       	push	r27
     e04:	ef 93       	push	r30
     e06:	ff 93       	push	r31
     e08:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__data_end>
     e0c:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__data_end+0x1>
     e10:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e14:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e18:	c9 01       	movw	r24, r18
     e1a:	03 2e       	mov	r0, r19
     e1c:	00 0c       	add	r0, r0
     e1e:	aa 0b       	sbc	r26, r26
     e20:	bb 0b       	sbc	r27, r27
     e22:	dc 01       	movw	r26, r24
     e24:	99 27       	eor	r25, r25
     e26:	88 27       	eor	r24, r24
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	70 e0       	ldi	r23, 0x00	; 0
     e2c:	84 2b       	or	r24, r20
     e2e:	95 2b       	or	r25, r21
     e30:	a6 2b       	or	r26, r22
     e32:	b7 2b       	or	r27, r23
     e34:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     e38:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     e3c:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     e40:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     e44:	b0 9b       	sbis	0x16, 0	; 22
     e46:	1b c0       	rjmp	.+54     	; 0xe7e <__vector_11+0x98>
     e48:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     e4c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     e50:	c9 01       	movw	r24, r18
     e52:	01 96       	adiw	r24, 0x01	; 1
     e54:	09 2e       	mov	r0, r25
     e56:	00 0c       	add	r0, r0
     e58:	aa 0b       	sbc	r26, r26
     e5a:	bb 0b       	sbc	r27, r27
     e5c:	dc 01       	movw	r26, r24
     e5e:	99 27       	eor	r25, r25
     e60:	88 27       	eor	r24, r24
     e62:	60 e0       	ldi	r22, 0x00	; 0
     e64:	70 e0       	ldi	r23, 0x00	; 0
     e66:	84 2b       	or	r24, r20
     e68:	95 2b       	or	r25, r21
     e6a:	a6 2b       	or	r26, r22
     e6c:	b7 2b       	or	r27, r23
     e6e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     e72:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     e76:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     e7a:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     e7e:	e0 91 e6 01 	lds	r30, 0x01E6	; 0x8001e6 <mtable+0xc>
     e82:	f0 91 e7 01 	lds	r31, 0x01E7	; 0x8001e7 <mtable+0xd>
     e86:	30 97       	sbiw	r30, 0x00	; 0
     e88:	39 f0       	breq	.+14     	; 0xe98 <__vector_11+0xb2>
     e8a:	66 e0       	ldi	r22, 0x06	; 6
     e8c:	70 e0       	ldi	r23, 0x00	; 0
     e8e:	80 91 4e 01 	lds	r24, 0x014E	; 0x80014e <otable+0xc>
     e92:	90 91 4f 01 	lds	r25, 0x014F	; 0x80014f <otable+0xd>
     e96:	09 95       	icall
     e98:	0e 94 20 04 	call	0x840	; 0x840 <schedule>
     e9c:	ff 91       	pop	r31
     e9e:	ef 91       	pop	r30
     ea0:	bf 91       	pop	r27
     ea2:	af 91       	pop	r26
     ea4:	9f 91       	pop	r25
     ea6:	8f 91       	pop	r24
     ea8:	7f 91       	pop	r23
     eaa:	6f 91       	pop	r22
     eac:	5f 91       	pop	r21
     eae:	4f 91       	pop	r20
     eb0:	3f 91       	pop	r19
     eb2:	2f 91       	pop	r18
     eb4:	0f 90       	pop	r0
     eb6:	0f be       	out	0x3f, r0	; 63
     eb8:	0f 90       	pop	r0
     eba:	1f 90       	pop	r1
     ebc:	18 95       	reti

00000ebe <__vector_12>:
     ebe:	1f 92       	push	r1
     ec0:	0f 92       	push	r0
     ec2:	0f b6       	in	r0, 0x3f	; 63
     ec4:	0f 92       	push	r0
     ec6:	11 24       	eor	r1, r1
     ec8:	2f 93       	push	r18
     eca:	3f 93       	push	r19
     ecc:	4f 93       	push	r20
     ece:	5f 93       	push	r21
     ed0:	6f 93       	push	r22
     ed2:	7f 93       	push	r23
     ed4:	8f 93       	push	r24
     ed6:	9f 93       	push	r25
     ed8:	af 93       	push	r26
     eda:	bf 93       	push	r27
     edc:	ef 93       	push	r30
     ede:	ff 93       	push	r31
     ee0:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__data_end>
     ee4:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__data_end+0x1>
     ee8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     eec:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     ef0:	c9 01       	movw	r24, r18
     ef2:	03 2e       	mov	r0, r19
     ef4:	00 0c       	add	r0, r0
     ef6:	aa 0b       	sbc	r26, r26
     ef8:	bb 0b       	sbc	r27, r27
     efa:	dc 01       	movw	r26, r24
     efc:	99 27       	eor	r25, r25
     efe:	88 27       	eor	r24, r24
     f00:	60 e0       	ldi	r22, 0x00	; 0
     f02:	70 e0       	ldi	r23, 0x00	; 0
     f04:	84 2b       	or	r24, r20
     f06:	95 2b       	or	r25, r21
     f08:	a6 2b       	or	r26, r22
     f0a:	b7 2b       	or	r27, r23
     f0c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     f10:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     f14:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     f18:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     f1c:	b0 9b       	sbis	0x16, 0	; 22
     f1e:	1b c0       	rjmp	.+54     	; 0xf56 <__vector_12+0x98>
     f20:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     f24:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     f28:	c9 01       	movw	r24, r18
     f2a:	01 96       	adiw	r24, 0x01	; 1
     f2c:	09 2e       	mov	r0, r25
     f2e:	00 0c       	add	r0, r0
     f30:	aa 0b       	sbc	r26, r26
     f32:	bb 0b       	sbc	r27, r27
     f34:	dc 01       	movw	r26, r24
     f36:	99 27       	eor	r25, r25
     f38:	88 27       	eor	r24, r24
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	70 e0       	ldi	r23, 0x00	; 0
     f3e:	84 2b       	or	r24, r20
     f40:	95 2b       	or	r25, r21
     f42:	a6 2b       	or	r26, r22
     f44:	b7 2b       	or	r27, r23
     f46:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     f4a:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     f4e:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     f52:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     f56:	e0 91 e8 01 	lds	r30, 0x01E8	; 0x8001e8 <mtable+0xe>
     f5a:	f0 91 e9 01 	lds	r31, 0x01E9	; 0x8001e9 <mtable+0xf>
     f5e:	30 97       	sbiw	r30, 0x00	; 0
     f60:	39 f0       	breq	.+14     	; 0xf70 <__vector_12+0xb2>
     f62:	67 e0       	ldi	r22, 0x07	; 7
     f64:	70 e0       	ldi	r23, 0x00	; 0
     f66:	80 91 50 01 	lds	r24, 0x0150	; 0x800150 <otable+0xe>
     f6a:	90 91 51 01 	lds	r25, 0x0151	; 0x800151 <otable+0xf>
     f6e:	09 95       	icall
     f70:	0e 94 20 04 	call	0x840	; 0x840 <schedule>
     f74:	ff 91       	pop	r31
     f76:	ef 91       	pop	r30
     f78:	bf 91       	pop	r27
     f7a:	af 91       	pop	r26
     f7c:	9f 91       	pop	r25
     f7e:	8f 91       	pop	r24
     f80:	7f 91       	pop	r23
     f82:	6f 91       	pop	r22
     f84:	5f 91       	pop	r21
     f86:	4f 91       	pop	r20
     f88:	3f 91       	pop	r19
     f8a:	2f 91       	pop	r18
     f8c:	0f 90       	pop	r0
     f8e:	0f be       	out	0x3f, r0	; 63
     f90:	0f 90       	pop	r0
     f92:	1f 90       	pop	r1
     f94:	18 95       	reti

00000f96 <__vector_13>:
     f96:	1f 92       	push	r1
     f98:	0f 92       	push	r0
     f9a:	0f b6       	in	r0, 0x3f	; 63
     f9c:	0f 92       	push	r0
     f9e:	11 24       	eor	r1, r1
     fa0:	2f 93       	push	r18
     fa2:	3f 93       	push	r19
     fa4:	4f 93       	push	r20
     fa6:	5f 93       	push	r21
     fa8:	6f 93       	push	r22
     faa:	7f 93       	push	r23
     fac:	8f 93       	push	r24
     fae:	9f 93       	push	r25
     fb0:	af 93       	push	r26
     fb2:	bf 93       	push	r27
     fb4:	ef 93       	push	r30
     fb6:	ff 93       	push	r31
     fb8:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__data_end>
     fbc:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__data_end+0x1>
     fc0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     fc4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
     fc8:	c9 01       	movw	r24, r18
     fca:	03 2e       	mov	r0, r19
     fcc:	00 0c       	add	r0, r0
     fce:	aa 0b       	sbc	r26, r26
     fd0:	bb 0b       	sbc	r27, r27
     fd2:	dc 01       	movw	r26, r24
     fd4:	99 27       	eor	r25, r25
     fd6:	88 27       	eor	r24, r24
     fd8:	60 e0       	ldi	r22, 0x00	; 0
     fda:	70 e0       	ldi	r23, 0x00	; 0
     fdc:	84 2b       	or	r24, r20
     fde:	95 2b       	or	r25, r21
     fe0:	a6 2b       	or	r26, r22
     fe2:	b7 2b       	or	r27, r23
     fe4:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
     fe8:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
     fec:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
     ff0:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
     ff4:	b0 9b       	sbis	0x16, 0	; 22
     ff6:	1b c0       	rjmp	.+54     	; 0x102e <__vector_13+0x98>
     ff8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
     ffc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1000:	c9 01       	movw	r24, r18
    1002:	01 96       	adiw	r24, 0x01	; 1
    1004:	09 2e       	mov	r0, r25
    1006:	00 0c       	add	r0, r0
    1008:	aa 0b       	sbc	r26, r26
    100a:	bb 0b       	sbc	r27, r27
    100c:	dc 01       	movw	r26, r24
    100e:	99 27       	eor	r25, r25
    1010:	88 27       	eor	r24, r24
    1012:	60 e0       	ldi	r22, 0x00	; 0
    1014:	70 e0       	ldi	r23, 0x00	; 0
    1016:	84 2b       	or	r24, r20
    1018:	95 2b       	or	r25, r21
    101a:	a6 2b       	or	r26, r22
    101c:	b7 2b       	or	r27, r23
    101e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1022:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1026:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    102a:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    102e:	e0 91 ea 01 	lds	r30, 0x01EA	; 0x8001ea <mtable+0x10>
    1032:	f0 91 eb 01 	lds	r31, 0x01EB	; 0x8001eb <mtable+0x11>
    1036:	30 97       	sbiw	r30, 0x00	; 0
    1038:	39 f0       	breq	.+14     	; 0x1048 <__vector_13+0xb2>
    103a:	68 e0       	ldi	r22, 0x08	; 8
    103c:	70 e0       	ldi	r23, 0x00	; 0
    103e:	80 91 52 01 	lds	r24, 0x0152	; 0x800152 <otable+0x10>
    1042:	90 91 53 01 	lds	r25, 0x0153	; 0x800153 <otable+0x11>
    1046:	09 95       	icall
    1048:	0e 94 20 04 	call	0x840	; 0x840 <schedule>
    104c:	ff 91       	pop	r31
    104e:	ef 91       	pop	r30
    1050:	bf 91       	pop	r27
    1052:	af 91       	pop	r26
    1054:	9f 91       	pop	r25
    1056:	8f 91       	pop	r24
    1058:	7f 91       	pop	r23
    105a:	6f 91       	pop	r22
    105c:	5f 91       	pop	r21
    105e:	4f 91       	pop	r20
    1060:	3f 91       	pop	r19
    1062:	2f 91       	pop	r18
    1064:	0f 90       	pop	r0
    1066:	0f be       	out	0x3f, r0	; 63
    1068:	0f 90       	pop	r0
    106a:	1f 90       	pop	r1
    106c:	18 95       	reti

0000106e <__vector_14>:
    106e:	1f 92       	push	r1
    1070:	0f 92       	push	r0
    1072:	0f b6       	in	r0, 0x3f	; 63
    1074:	0f 92       	push	r0
    1076:	11 24       	eor	r1, r1
    1078:	2f 93       	push	r18
    107a:	3f 93       	push	r19
    107c:	4f 93       	push	r20
    107e:	5f 93       	push	r21
    1080:	6f 93       	push	r22
    1082:	7f 93       	push	r23
    1084:	8f 93       	push	r24
    1086:	9f 93       	push	r25
    1088:	af 93       	push	r26
    108a:	bf 93       	push	r27
    108c:	ef 93       	push	r30
    108e:	ff 93       	push	r31
    1090:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__data_end>
    1094:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__data_end+0x1>
    1098:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    109c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10a0:	c9 01       	movw	r24, r18
    10a2:	03 2e       	mov	r0, r19
    10a4:	00 0c       	add	r0, r0
    10a6:	aa 0b       	sbc	r26, r26
    10a8:	bb 0b       	sbc	r27, r27
    10aa:	dc 01       	movw	r26, r24
    10ac:	99 27       	eor	r25, r25
    10ae:	88 27       	eor	r24, r24
    10b0:	60 e0       	ldi	r22, 0x00	; 0
    10b2:	70 e0       	ldi	r23, 0x00	; 0
    10b4:	84 2b       	or	r24, r20
    10b6:	95 2b       	or	r25, r21
    10b8:	a6 2b       	or	r26, r22
    10ba:	b7 2b       	or	r27, r23
    10bc:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    10c0:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    10c4:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    10c8:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    10cc:	b0 9b       	sbis	0x16, 0	; 22
    10ce:	1b c0       	rjmp	.+54     	; 0x1106 <__vector_14+0x98>
    10d0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    10d4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    10d8:	c9 01       	movw	r24, r18
    10da:	01 96       	adiw	r24, 0x01	; 1
    10dc:	09 2e       	mov	r0, r25
    10de:	00 0c       	add	r0, r0
    10e0:	aa 0b       	sbc	r26, r26
    10e2:	bb 0b       	sbc	r27, r27
    10e4:	dc 01       	movw	r26, r24
    10e6:	99 27       	eor	r25, r25
    10e8:	88 27       	eor	r24, r24
    10ea:	60 e0       	ldi	r22, 0x00	; 0
    10ec:	70 e0       	ldi	r23, 0x00	; 0
    10ee:	84 2b       	or	r24, r20
    10f0:	95 2b       	or	r25, r21
    10f2:	a6 2b       	or	r26, r22
    10f4:	b7 2b       	or	r27, r23
    10f6:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    10fa:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    10fe:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1102:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1106:	e0 91 ec 01 	lds	r30, 0x01EC	; 0x8001ec <mtable+0x12>
    110a:	f0 91 ed 01 	lds	r31, 0x01ED	; 0x8001ed <mtable+0x13>
    110e:	30 97       	sbiw	r30, 0x00	; 0
    1110:	39 f0       	breq	.+14     	; 0x1120 <__vector_14+0xb2>
    1112:	69 e0       	ldi	r22, 0x09	; 9
    1114:	70 e0       	ldi	r23, 0x00	; 0
    1116:	80 91 54 01 	lds	r24, 0x0154	; 0x800154 <otable+0x12>
    111a:	90 91 55 01 	lds	r25, 0x0155	; 0x800155 <otable+0x13>
    111e:	09 95       	icall
    1120:	0e 94 20 04 	call	0x840	; 0x840 <schedule>
    1124:	ff 91       	pop	r31
    1126:	ef 91       	pop	r30
    1128:	bf 91       	pop	r27
    112a:	af 91       	pop	r26
    112c:	9f 91       	pop	r25
    112e:	8f 91       	pop	r24
    1130:	7f 91       	pop	r23
    1132:	6f 91       	pop	r22
    1134:	5f 91       	pop	r21
    1136:	4f 91       	pop	r20
    1138:	3f 91       	pop	r19
    113a:	2f 91       	pop	r18
    113c:	0f 90       	pop	r0
    113e:	0f be       	out	0x3f, r0	; 63
    1140:	0f 90       	pop	r0
    1142:	1f 90       	pop	r1
    1144:	18 95       	reti

00001146 <__vector_15>:
    1146:	1f 92       	push	r1
    1148:	0f 92       	push	r0
    114a:	0f b6       	in	r0, 0x3f	; 63
    114c:	0f 92       	push	r0
    114e:	11 24       	eor	r1, r1
    1150:	2f 93       	push	r18
    1152:	3f 93       	push	r19
    1154:	4f 93       	push	r20
    1156:	5f 93       	push	r21
    1158:	6f 93       	push	r22
    115a:	7f 93       	push	r23
    115c:	8f 93       	push	r24
    115e:	9f 93       	push	r25
    1160:	af 93       	push	r26
    1162:	bf 93       	push	r27
    1164:	ef 93       	push	r30
    1166:	ff 93       	push	r31
    1168:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__data_end>
    116c:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__data_end+0x1>
    1170:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1174:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1178:	c9 01       	movw	r24, r18
    117a:	03 2e       	mov	r0, r19
    117c:	00 0c       	add	r0, r0
    117e:	aa 0b       	sbc	r26, r26
    1180:	bb 0b       	sbc	r27, r27
    1182:	dc 01       	movw	r26, r24
    1184:	99 27       	eor	r25, r25
    1186:	88 27       	eor	r24, r24
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	84 2b       	or	r24, r20
    118e:	95 2b       	or	r25, r21
    1190:	a6 2b       	or	r26, r22
    1192:	b7 2b       	or	r27, r23
    1194:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1198:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    119c:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    11a0:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    11a4:	b0 9b       	sbis	0x16, 0	; 22
    11a6:	1b c0       	rjmp	.+54     	; 0x11de <__vector_15+0x98>
    11a8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    11ac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    11b0:	c9 01       	movw	r24, r18
    11b2:	01 96       	adiw	r24, 0x01	; 1
    11b4:	09 2e       	mov	r0, r25
    11b6:	00 0c       	add	r0, r0
    11b8:	aa 0b       	sbc	r26, r26
    11ba:	bb 0b       	sbc	r27, r27
    11bc:	dc 01       	movw	r26, r24
    11be:	99 27       	eor	r25, r25
    11c0:	88 27       	eor	r24, r24
    11c2:	60 e0       	ldi	r22, 0x00	; 0
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	84 2b       	or	r24, r20
    11c8:	95 2b       	or	r25, r21
    11ca:	a6 2b       	or	r26, r22
    11cc:	b7 2b       	or	r27, r23
    11ce:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    11d2:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    11d6:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    11da:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    11de:	e0 91 ee 01 	lds	r30, 0x01EE	; 0x8001ee <mtable+0x14>
    11e2:	f0 91 ef 01 	lds	r31, 0x01EF	; 0x8001ef <mtable+0x15>
    11e6:	30 97       	sbiw	r30, 0x00	; 0
    11e8:	39 f0       	breq	.+14     	; 0x11f8 <__vector_15+0xb2>
    11ea:	6a e0       	ldi	r22, 0x0A	; 10
    11ec:	70 e0       	ldi	r23, 0x00	; 0
    11ee:	80 91 56 01 	lds	r24, 0x0156	; 0x800156 <otable+0x14>
    11f2:	90 91 57 01 	lds	r25, 0x0157	; 0x800157 <otable+0x15>
    11f6:	09 95       	icall
    11f8:	0e 94 20 04 	call	0x840	; 0x840 <schedule>
    11fc:	ff 91       	pop	r31
    11fe:	ef 91       	pop	r30
    1200:	bf 91       	pop	r27
    1202:	af 91       	pop	r26
    1204:	9f 91       	pop	r25
    1206:	8f 91       	pop	r24
    1208:	7f 91       	pop	r23
    120a:	6f 91       	pop	r22
    120c:	5f 91       	pop	r21
    120e:	4f 91       	pop	r20
    1210:	3f 91       	pop	r19
    1212:	2f 91       	pop	r18
    1214:	0f 90       	pop	r0
    1216:	0f be       	out	0x3f, r0	; 63
    1218:	0f 90       	pop	r0
    121a:	1f 90       	pop	r1
    121c:	18 95       	reti

0000121e <__vector_16>:
    121e:	1f 92       	push	r1
    1220:	0f 92       	push	r0
    1222:	0f b6       	in	r0, 0x3f	; 63
    1224:	0f 92       	push	r0
    1226:	11 24       	eor	r1, r1
    1228:	2f 93       	push	r18
    122a:	3f 93       	push	r19
    122c:	4f 93       	push	r20
    122e:	5f 93       	push	r21
    1230:	6f 93       	push	r22
    1232:	7f 93       	push	r23
    1234:	8f 93       	push	r24
    1236:	9f 93       	push	r25
    1238:	af 93       	push	r26
    123a:	bf 93       	push	r27
    123c:	ef 93       	push	r30
    123e:	ff 93       	push	r31
    1240:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__data_end>
    1244:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__data_end+0x1>
    1248:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    124c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1250:	c9 01       	movw	r24, r18
    1252:	03 2e       	mov	r0, r19
    1254:	00 0c       	add	r0, r0
    1256:	aa 0b       	sbc	r26, r26
    1258:	bb 0b       	sbc	r27, r27
    125a:	dc 01       	movw	r26, r24
    125c:	99 27       	eor	r25, r25
    125e:	88 27       	eor	r24, r24
    1260:	60 e0       	ldi	r22, 0x00	; 0
    1262:	70 e0       	ldi	r23, 0x00	; 0
    1264:	84 2b       	or	r24, r20
    1266:	95 2b       	or	r25, r21
    1268:	a6 2b       	or	r26, r22
    126a:	b7 2b       	or	r27, r23
    126c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1270:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1274:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1278:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    127c:	b0 9b       	sbis	0x16, 0	; 22
    127e:	1b c0       	rjmp	.+54     	; 0x12b6 <__vector_16+0x98>
    1280:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1284:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1288:	c9 01       	movw	r24, r18
    128a:	01 96       	adiw	r24, 0x01	; 1
    128c:	09 2e       	mov	r0, r25
    128e:	00 0c       	add	r0, r0
    1290:	aa 0b       	sbc	r26, r26
    1292:	bb 0b       	sbc	r27, r27
    1294:	dc 01       	movw	r26, r24
    1296:	99 27       	eor	r25, r25
    1298:	88 27       	eor	r24, r24
    129a:	60 e0       	ldi	r22, 0x00	; 0
    129c:	70 e0       	ldi	r23, 0x00	; 0
    129e:	84 2b       	or	r24, r20
    12a0:	95 2b       	or	r25, r21
    12a2:	a6 2b       	or	r26, r22
    12a4:	b7 2b       	or	r27, r23
    12a6:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    12aa:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    12ae:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    12b2:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    12b6:	e0 91 f0 01 	lds	r30, 0x01F0	; 0x8001f0 <mtable+0x16>
    12ba:	f0 91 f1 01 	lds	r31, 0x01F1	; 0x8001f1 <mtable+0x17>
    12be:	30 97       	sbiw	r30, 0x00	; 0
    12c0:	39 f0       	breq	.+14     	; 0x12d0 <__vector_16+0xb2>
    12c2:	6b e0       	ldi	r22, 0x0B	; 11
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	80 91 58 01 	lds	r24, 0x0158	; 0x800158 <otable+0x16>
    12ca:	90 91 59 01 	lds	r25, 0x0159	; 0x800159 <otable+0x17>
    12ce:	09 95       	icall
    12d0:	0e 94 20 04 	call	0x840	; 0x840 <schedule>
    12d4:	ff 91       	pop	r31
    12d6:	ef 91       	pop	r30
    12d8:	bf 91       	pop	r27
    12da:	af 91       	pop	r26
    12dc:	9f 91       	pop	r25
    12de:	8f 91       	pop	r24
    12e0:	7f 91       	pop	r23
    12e2:	6f 91       	pop	r22
    12e4:	5f 91       	pop	r21
    12e6:	4f 91       	pop	r20
    12e8:	3f 91       	pop	r19
    12ea:	2f 91       	pop	r18
    12ec:	0f 90       	pop	r0
    12ee:	0f be       	out	0x3f, r0	; 63
    12f0:	0f 90       	pop	r0
    12f2:	1f 90       	pop	r1
    12f4:	18 95       	reti

000012f6 <__vector_17>:
    12f6:	1f 92       	push	r1
    12f8:	0f 92       	push	r0
    12fa:	0f b6       	in	r0, 0x3f	; 63
    12fc:	0f 92       	push	r0
    12fe:	11 24       	eor	r1, r1
    1300:	2f 93       	push	r18
    1302:	3f 93       	push	r19
    1304:	4f 93       	push	r20
    1306:	5f 93       	push	r21
    1308:	6f 93       	push	r22
    130a:	7f 93       	push	r23
    130c:	8f 93       	push	r24
    130e:	9f 93       	push	r25
    1310:	af 93       	push	r26
    1312:	bf 93       	push	r27
    1314:	ef 93       	push	r30
    1316:	ff 93       	push	r31
    1318:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__data_end>
    131c:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__data_end+0x1>
    1320:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1324:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1328:	c9 01       	movw	r24, r18
    132a:	03 2e       	mov	r0, r19
    132c:	00 0c       	add	r0, r0
    132e:	aa 0b       	sbc	r26, r26
    1330:	bb 0b       	sbc	r27, r27
    1332:	dc 01       	movw	r26, r24
    1334:	99 27       	eor	r25, r25
    1336:	88 27       	eor	r24, r24
    1338:	60 e0       	ldi	r22, 0x00	; 0
    133a:	70 e0       	ldi	r23, 0x00	; 0
    133c:	84 2b       	or	r24, r20
    133e:	95 2b       	or	r25, r21
    1340:	a6 2b       	or	r26, r22
    1342:	b7 2b       	or	r27, r23
    1344:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1348:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    134c:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1350:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1354:	b0 9b       	sbis	0x16, 0	; 22
    1356:	1b c0       	rjmp	.+54     	; 0x138e <__vector_17+0x98>
    1358:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    135c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1360:	c9 01       	movw	r24, r18
    1362:	01 96       	adiw	r24, 0x01	; 1
    1364:	09 2e       	mov	r0, r25
    1366:	00 0c       	add	r0, r0
    1368:	aa 0b       	sbc	r26, r26
    136a:	bb 0b       	sbc	r27, r27
    136c:	dc 01       	movw	r26, r24
    136e:	99 27       	eor	r25, r25
    1370:	88 27       	eor	r24, r24
    1372:	60 e0       	ldi	r22, 0x00	; 0
    1374:	70 e0       	ldi	r23, 0x00	; 0
    1376:	84 2b       	or	r24, r20
    1378:	95 2b       	or	r25, r21
    137a:	a6 2b       	or	r26, r22
    137c:	b7 2b       	or	r27, r23
    137e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1382:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1386:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    138a:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    138e:	e0 91 f2 01 	lds	r30, 0x01F2	; 0x8001f2 <mtable+0x18>
    1392:	f0 91 f3 01 	lds	r31, 0x01F3	; 0x8001f3 <mtable+0x19>
    1396:	30 97       	sbiw	r30, 0x00	; 0
    1398:	39 f0       	breq	.+14     	; 0x13a8 <__vector_17+0xb2>
    139a:	6c e0       	ldi	r22, 0x0C	; 12
    139c:	70 e0       	ldi	r23, 0x00	; 0
    139e:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <otable+0x18>
    13a2:	90 91 5b 01 	lds	r25, 0x015B	; 0x80015b <otable+0x19>
    13a6:	09 95       	icall
    13a8:	0e 94 20 04 	call	0x840	; 0x840 <schedule>
    13ac:	ff 91       	pop	r31
    13ae:	ef 91       	pop	r30
    13b0:	bf 91       	pop	r27
    13b2:	af 91       	pop	r26
    13b4:	9f 91       	pop	r25
    13b6:	8f 91       	pop	r24
    13b8:	7f 91       	pop	r23
    13ba:	6f 91       	pop	r22
    13bc:	5f 91       	pop	r21
    13be:	4f 91       	pop	r20
    13c0:	3f 91       	pop	r19
    13c2:	2f 91       	pop	r18
    13c4:	0f 90       	pop	r0
    13c6:	0f be       	out	0x3f, r0	; 63
    13c8:	0f 90       	pop	r0
    13ca:	1f 90       	pop	r1
    13cc:	18 95       	reti

000013ce <__vector_18>:
    13ce:	1f 92       	push	r1
    13d0:	0f 92       	push	r0
    13d2:	0f b6       	in	r0, 0x3f	; 63
    13d4:	0f 92       	push	r0
    13d6:	11 24       	eor	r1, r1
    13d8:	2f 93       	push	r18
    13da:	3f 93       	push	r19
    13dc:	4f 93       	push	r20
    13de:	5f 93       	push	r21
    13e0:	6f 93       	push	r22
    13e2:	7f 93       	push	r23
    13e4:	8f 93       	push	r24
    13e6:	9f 93       	push	r25
    13e8:	af 93       	push	r26
    13ea:	bf 93       	push	r27
    13ec:	ef 93       	push	r30
    13ee:	ff 93       	push	r31
    13f0:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__data_end>
    13f4:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__data_end+0x1>
    13f8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    13fc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1400:	c9 01       	movw	r24, r18
    1402:	03 2e       	mov	r0, r19
    1404:	00 0c       	add	r0, r0
    1406:	aa 0b       	sbc	r26, r26
    1408:	bb 0b       	sbc	r27, r27
    140a:	dc 01       	movw	r26, r24
    140c:	99 27       	eor	r25, r25
    140e:	88 27       	eor	r24, r24
    1410:	60 e0       	ldi	r22, 0x00	; 0
    1412:	70 e0       	ldi	r23, 0x00	; 0
    1414:	84 2b       	or	r24, r20
    1416:	95 2b       	or	r25, r21
    1418:	a6 2b       	or	r26, r22
    141a:	b7 2b       	or	r27, r23
    141c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1420:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1424:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1428:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    142c:	b0 9b       	sbis	0x16, 0	; 22
    142e:	1b c0       	rjmp	.+54     	; 0x1466 <__vector_18+0x98>
    1430:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1434:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1438:	c9 01       	movw	r24, r18
    143a:	01 96       	adiw	r24, 0x01	; 1
    143c:	09 2e       	mov	r0, r25
    143e:	00 0c       	add	r0, r0
    1440:	aa 0b       	sbc	r26, r26
    1442:	bb 0b       	sbc	r27, r27
    1444:	dc 01       	movw	r26, r24
    1446:	99 27       	eor	r25, r25
    1448:	88 27       	eor	r24, r24
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	70 e0       	ldi	r23, 0x00	; 0
    144e:	84 2b       	or	r24, r20
    1450:	95 2b       	or	r25, r21
    1452:	a6 2b       	or	r26, r22
    1454:	b7 2b       	or	r27, r23
    1456:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    145a:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    145e:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1462:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1466:	e0 91 f4 01 	lds	r30, 0x01F4	; 0x8001f4 <mtable+0x1a>
    146a:	f0 91 f5 01 	lds	r31, 0x01F5	; 0x8001f5 <mtable+0x1b>
    146e:	30 97       	sbiw	r30, 0x00	; 0
    1470:	39 f0       	breq	.+14     	; 0x1480 <__vector_18+0xb2>
    1472:	6d e0       	ldi	r22, 0x0D	; 13
    1474:	70 e0       	ldi	r23, 0x00	; 0
    1476:	80 91 5c 01 	lds	r24, 0x015C	; 0x80015c <otable+0x1a>
    147a:	90 91 5d 01 	lds	r25, 0x015D	; 0x80015d <otable+0x1b>
    147e:	09 95       	icall
    1480:	0e 94 20 04 	call	0x840	; 0x840 <schedule>
    1484:	ff 91       	pop	r31
    1486:	ef 91       	pop	r30
    1488:	bf 91       	pop	r27
    148a:	af 91       	pop	r26
    148c:	9f 91       	pop	r25
    148e:	8f 91       	pop	r24
    1490:	7f 91       	pop	r23
    1492:	6f 91       	pop	r22
    1494:	5f 91       	pop	r21
    1496:	4f 91       	pop	r20
    1498:	3f 91       	pop	r19
    149a:	2f 91       	pop	r18
    149c:	0f 90       	pop	r0
    149e:	0f be       	out	0x3f, r0	; 63
    14a0:	0f 90       	pop	r0
    14a2:	1f 90       	pop	r1
    14a4:	18 95       	reti

000014a6 <__vector_19>:
    14a6:	1f 92       	push	r1
    14a8:	0f 92       	push	r0
    14aa:	0f b6       	in	r0, 0x3f	; 63
    14ac:	0f 92       	push	r0
    14ae:	11 24       	eor	r1, r1
    14b0:	2f 93       	push	r18
    14b2:	3f 93       	push	r19
    14b4:	4f 93       	push	r20
    14b6:	5f 93       	push	r21
    14b8:	6f 93       	push	r22
    14ba:	7f 93       	push	r23
    14bc:	8f 93       	push	r24
    14be:	9f 93       	push	r25
    14c0:	af 93       	push	r26
    14c2:	bf 93       	push	r27
    14c4:	ef 93       	push	r30
    14c6:	ff 93       	push	r31
    14c8:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__data_end>
    14cc:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__data_end+0x1>
    14d0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    14d4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    14d8:	c9 01       	movw	r24, r18
    14da:	03 2e       	mov	r0, r19
    14dc:	00 0c       	add	r0, r0
    14de:	aa 0b       	sbc	r26, r26
    14e0:	bb 0b       	sbc	r27, r27
    14e2:	dc 01       	movw	r26, r24
    14e4:	99 27       	eor	r25, r25
    14e6:	88 27       	eor	r24, r24
    14e8:	60 e0       	ldi	r22, 0x00	; 0
    14ea:	70 e0       	ldi	r23, 0x00	; 0
    14ec:	84 2b       	or	r24, r20
    14ee:	95 2b       	or	r25, r21
    14f0:	a6 2b       	or	r26, r22
    14f2:	b7 2b       	or	r27, r23
    14f4:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    14f8:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    14fc:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1500:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1504:	b0 9b       	sbis	0x16, 0	; 22
    1506:	1b c0       	rjmp	.+54     	; 0x153e <__vector_19+0x98>
    1508:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    150c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1510:	c9 01       	movw	r24, r18
    1512:	01 96       	adiw	r24, 0x01	; 1
    1514:	09 2e       	mov	r0, r25
    1516:	00 0c       	add	r0, r0
    1518:	aa 0b       	sbc	r26, r26
    151a:	bb 0b       	sbc	r27, r27
    151c:	dc 01       	movw	r26, r24
    151e:	99 27       	eor	r25, r25
    1520:	88 27       	eor	r24, r24
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	70 e0       	ldi	r23, 0x00	; 0
    1526:	84 2b       	or	r24, r20
    1528:	95 2b       	or	r25, r21
    152a:	a6 2b       	or	r26, r22
    152c:	b7 2b       	or	r27, r23
    152e:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1532:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1536:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    153a:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    153e:	e0 91 f6 01 	lds	r30, 0x01F6	; 0x8001f6 <mtable+0x1c>
    1542:	f0 91 f7 01 	lds	r31, 0x01F7	; 0x8001f7 <mtable+0x1d>
    1546:	30 97       	sbiw	r30, 0x00	; 0
    1548:	39 f0       	breq	.+14     	; 0x1558 <__vector_19+0xb2>
    154a:	6e e0       	ldi	r22, 0x0E	; 14
    154c:	70 e0       	ldi	r23, 0x00	; 0
    154e:	80 91 5e 01 	lds	r24, 0x015E	; 0x80015e <otable+0x1c>
    1552:	90 91 5f 01 	lds	r25, 0x015F	; 0x80015f <otable+0x1d>
    1556:	09 95       	icall
    1558:	0e 94 20 04 	call	0x840	; 0x840 <schedule>
    155c:	ff 91       	pop	r31
    155e:	ef 91       	pop	r30
    1560:	bf 91       	pop	r27
    1562:	af 91       	pop	r26
    1564:	9f 91       	pop	r25
    1566:	8f 91       	pop	r24
    1568:	7f 91       	pop	r23
    156a:	6f 91       	pop	r22
    156c:	5f 91       	pop	r21
    156e:	4f 91       	pop	r20
    1570:	3f 91       	pop	r19
    1572:	2f 91       	pop	r18
    1574:	0f 90       	pop	r0
    1576:	0f be       	out	0x3f, r0	; 63
    1578:	0f 90       	pop	r0
    157a:	1f 90       	pop	r1
    157c:	18 95       	reti

0000157e <__vector_20>:
    157e:	1f 92       	push	r1
    1580:	0f 92       	push	r0
    1582:	0f b6       	in	r0, 0x3f	; 63
    1584:	0f 92       	push	r0
    1586:	11 24       	eor	r1, r1
    1588:	2f 93       	push	r18
    158a:	3f 93       	push	r19
    158c:	4f 93       	push	r20
    158e:	5f 93       	push	r21
    1590:	6f 93       	push	r22
    1592:	7f 93       	push	r23
    1594:	8f 93       	push	r24
    1596:	9f 93       	push	r25
    1598:	af 93       	push	r26
    159a:	bf 93       	push	r27
    159c:	ef 93       	push	r30
    159e:	ff 93       	push	r31
    15a0:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__data_end>
    15a4:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__data_end+0x1>
    15a8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15ac:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15b0:	c9 01       	movw	r24, r18
    15b2:	03 2e       	mov	r0, r19
    15b4:	00 0c       	add	r0, r0
    15b6:	aa 0b       	sbc	r26, r26
    15b8:	bb 0b       	sbc	r27, r27
    15ba:	dc 01       	movw	r26, r24
    15bc:	99 27       	eor	r25, r25
    15be:	88 27       	eor	r24, r24
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	84 2b       	or	r24, r20
    15c6:	95 2b       	or	r25, r21
    15c8:	a6 2b       	or	r26, r22
    15ca:	b7 2b       	or	r27, r23
    15cc:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    15d0:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    15d4:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    15d8:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    15dc:	b0 9b       	sbis	0x16, 0	; 22
    15de:	1b c0       	rjmp	.+54     	; 0x1616 <__vector_20+0x98>
    15e0:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    15e4:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    15e8:	c9 01       	movw	r24, r18
    15ea:	01 96       	adiw	r24, 0x01	; 1
    15ec:	09 2e       	mov	r0, r25
    15ee:	00 0c       	add	r0, r0
    15f0:	aa 0b       	sbc	r26, r26
    15f2:	bb 0b       	sbc	r27, r27
    15f4:	dc 01       	movw	r26, r24
    15f6:	99 27       	eor	r25, r25
    15f8:	88 27       	eor	r24, r24
    15fa:	60 e0       	ldi	r22, 0x00	; 0
    15fc:	70 e0       	ldi	r23, 0x00	; 0
    15fe:	84 2b       	or	r24, r20
    1600:	95 2b       	or	r25, r21
    1602:	a6 2b       	or	r26, r22
    1604:	b7 2b       	or	r27, r23
    1606:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    160a:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    160e:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1612:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    1616:	e0 91 f8 01 	lds	r30, 0x01F8	; 0x8001f8 <mtable+0x1e>
    161a:	f0 91 f9 01 	lds	r31, 0x01F9	; 0x8001f9 <mtable+0x1f>
    161e:	30 97       	sbiw	r30, 0x00	; 0
    1620:	39 f0       	breq	.+14     	; 0x1630 <__vector_20+0xb2>
    1622:	6f e0       	ldi	r22, 0x0F	; 15
    1624:	70 e0       	ldi	r23, 0x00	; 0
    1626:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <otable+0x1e>
    162a:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <otable+0x1f>
    162e:	09 95       	icall
    1630:	0e 94 20 04 	call	0x840	; 0x840 <schedule>
    1634:	ff 91       	pop	r31
    1636:	ef 91       	pop	r30
    1638:	bf 91       	pop	r27
    163a:	af 91       	pop	r26
    163c:	9f 91       	pop	r25
    163e:	8f 91       	pop	r24
    1640:	7f 91       	pop	r23
    1642:	6f 91       	pop	r22
    1644:	5f 91       	pop	r21
    1646:	4f 91       	pop	r20
    1648:	3f 91       	pop	r19
    164a:	2f 91       	pop	r18
    164c:	0f 90       	pop	r0
    164e:	0f be       	out	0x3f, r0	; 63
    1650:	0f 90       	pop	r0
    1652:	1f 90       	pop	r1
    1654:	18 95       	reti

00001656 <__vector_21>:
    1656:	1f 92       	push	r1
    1658:	0f 92       	push	r0
    165a:	0f b6       	in	r0, 0x3f	; 63
    165c:	0f 92       	push	r0
    165e:	11 24       	eor	r1, r1
    1660:	2f 93       	push	r18
    1662:	3f 93       	push	r19
    1664:	4f 93       	push	r20
    1666:	5f 93       	push	r21
    1668:	6f 93       	push	r22
    166a:	7f 93       	push	r23
    166c:	8f 93       	push	r24
    166e:	9f 93       	push	r25
    1670:	af 93       	push	r26
    1672:	bf 93       	push	r27
    1674:	ef 93       	push	r30
    1676:	ff 93       	push	r31
    1678:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__data_end>
    167c:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__data_end+0x1>
    1680:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1684:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1688:	c9 01       	movw	r24, r18
    168a:	03 2e       	mov	r0, r19
    168c:	00 0c       	add	r0, r0
    168e:	aa 0b       	sbc	r26, r26
    1690:	bb 0b       	sbc	r27, r27
    1692:	dc 01       	movw	r26, r24
    1694:	99 27       	eor	r25, r25
    1696:	88 27       	eor	r24, r24
    1698:	60 e0       	ldi	r22, 0x00	; 0
    169a:	70 e0       	ldi	r23, 0x00	; 0
    169c:	84 2b       	or	r24, r20
    169e:	95 2b       	or	r25, r21
    16a0:	a6 2b       	or	r26, r22
    16a2:	b7 2b       	or	r27, r23
    16a4:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    16a8:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    16ac:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    16b0:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    16b4:	b0 9b       	sbis	0x16, 0	; 22
    16b6:	1b c0       	rjmp	.+54     	; 0x16ee <__vector_21+0x98>
    16b8:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    16bc:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    16c0:	c9 01       	movw	r24, r18
    16c2:	01 96       	adiw	r24, 0x01	; 1
    16c4:	09 2e       	mov	r0, r25
    16c6:	00 0c       	add	r0, r0
    16c8:	aa 0b       	sbc	r26, r26
    16ca:	bb 0b       	sbc	r27, r27
    16cc:	dc 01       	movw	r26, r24
    16ce:	99 27       	eor	r25, r25
    16d0:	88 27       	eor	r24, r24
    16d2:	60 e0       	ldi	r22, 0x00	; 0
    16d4:	70 e0       	ldi	r23, 0x00	; 0
    16d6:	84 2b       	or	r24, r20
    16d8:	95 2b       	or	r25, r21
    16da:	a6 2b       	or	r26, r22
    16dc:	b7 2b       	or	r27, r23
    16de:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    16e2:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    16e6:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    16ea:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    16ee:	e0 91 fa 01 	lds	r30, 0x01FA	; 0x8001fa <mtable+0x20>
    16f2:	f0 91 fb 01 	lds	r31, 0x01FB	; 0x8001fb <mtable+0x21>
    16f6:	30 97       	sbiw	r30, 0x00	; 0
    16f8:	39 f0       	breq	.+14     	; 0x1708 <__vector_21+0xb2>
    16fa:	60 e1       	ldi	r22, 0x10	; 16
    16fc:	70 e0       	ldi	r23, 0x00	; 0
    16fe:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <otable+0x20>
    1702:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <otable+0x21>
    1706:	09 95       	icall
    1708:	0e 94 20 04 	call	0x840	; 0x840 <schedule>
    170c:	ff 91       	pop	r31
    170e:	ef 91       	pop	r30
    1710:	bf 91       	pop	r27
    1712:	af 91       	pop	r26
    1714:	9f 91       	pop	r25
    1716:	8f 91       	pop	r24
    1718:	7f 91       	pop	r23
    171a:	6f 91       	pop	r22
    171c:	5f 91       	pop	r21
    171e:	4f 91       	pop	r20
    1720:	3f 91       	pop	r19
    1722:	2f 91       	pop	r18
    1724:	0f 90       	pop	r0
    1726:	0f be       	out	0x3f, r0	; 63
    1728:	0f 90       	pop	r0
    172a:	1f 90       	pop	r1
    172c:	18 95       	reti

0000172e <__vector_22>:
    172e:	1f 92       	push	r1
    1730:	0f 92       	push	r0
    1732:	0f b6       	in	r0, 0x3f	; 63
    1734:	0f 92       	push	r0
    1736:	11 24       	eor	r1, r1
    1738:	2f 93       	push	r18
    173a:	3f 93       	push	r19
    173c:	4f 93       	push	r20
    173e:	5f 93       	push	r21
    1740:	6f 93       	push	r22
    1742:	7f 93       	push	r23
    1744:	8f 93       	push	r24
    1746:	9f 93       	push	r25
    1748:	af 93       	push	r26
    174a:	bf 93       	push	r27
    174c:	ef 93       	push	r30
    174e:	ff 93       	push	r31
    1750:	20 91 34 01 	lds	r18, 0x0134	; 0x800134 <__data_end>
    1754:	30 91 35 01 	lds	r19, 0x0135	; 0x800135 <__data_end+0x1>
    1758:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    175c:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1760:	c9 01       	movw	r24, r18
    1762:	03 2e       	mov	r0, r19
    1764:	00 0c       	add	r0, r0
    1766:	aa 0b       	sbc	r26, r26
    1768:	bb 0b       	sbc	r27, r27
    176a:	dc 01       	movw	r26, r24
    176c:	99 27       	eor	r25, r25
    176e:	88 27       	eor	r24, r24
    1770:	60 e0       	ldi	r22, 0x00	; 0
    1772:	70 e0       	ldi	r23, 0x00	; 0
    1774:	84 2b       	or	r24, r20
    1776:	95 2b       	or	r25, r21
    1778:	a6 2b       	or	r26, r22
    177a:	b7 2b       	or	r27, r23
    177c:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    1780:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    1784:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    1788:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    178c:	b0 9b       	sbis	0x16, 0	; 22
    178e:	1b c0       	rjmp	.+54     	; 0x17c6 <__vector_22+0x98>
    1790:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1794:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1798:	c9 01       	movw	r24, r18
    179a:	01 96       	adiw	r24, 0x01	; 1
    179c:	09 2e       	mov	r0, r25
    179e:	00 0c       	add	r0, r0
    17a0:	aa 0b       	sbc	r26, r26
    17a2:	bb 0b       	sbc	r27, r27
    17a4:	dc 01       	movw	r26, r24
    17a6:	99 27       	eor	r25, r25
    17a8:	88 27       	eor	r24, r24
    17aa:	60 e0       	ldi	r22, 0x00	; 0
    17ac:	70 e0       	ldi	r23, 0x00	; 0
    17ae:	84 2b       	or	r24, r20
    17b0:	95 2b       	or	r25, r21
    17b2:	a6 2b       	or	r26, r22
    17b4:	b7 2b       	or	r27, r23
    17b6:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <timestamp>
    17ba:	90 93 37 01 	sts	0x0137, r25	; 0x800137 <timestamp+0x1>
    17be:	a0 93 38 01 	sts	0x0138, r26	; 0x800138 <timestamp+0x2>
    17c2:	b0 93 39 01 	sts	0x0139, r27	; 0x800139 <timestamp+0x3>
    17c6:	e0 91 fc 01 	lds	r30, 0x01FC	; 0x8001fc <mtable+0x22>
    17ca:	f0 91 fd 01 	lds	r31, 0x01FD	; 0x8001fd <mtable+0x23>
    17ce:	30 97       	sbiw	r30, 0x00	; 0
    17d0:	39 f0       	breq	.+14     	; 0x17e0 <__vector_22+0xb2>
    17d2:	61 e1       	ldi	r22, 0x11	; 17
    17d4:	70 e0       	ldi	r23, 0x00	; 0
    17d6:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <otable+0x22>
    17da:	90 91 65 01 	lds	r25, 0x0165	; 0x800165 <otable+0x23>
    17de:	09 95       	icall
    17e0:	0e 94 20 04 	call	0x840	; 0x840 <schedule>
    17e4:	ff 91       	pop	r31
    17e6:	ef 91       	pop	r30
    17e8:	bf 91       	pop	r27
    17ea:	af 91       	pop	r26
    17ec:	9f 91       	pop	r25
    17ee:	8f 91       	pop	r24
    17f0:	7f 91       	pop	r23
    17f2:	6f 91       	pop	r22
    17f4:	5f 91       	pop	r21
    17f6:	4f 91       	pop	r20
    17f8:	3f 91       	pop	r19
    17fa:	2f 91       	pop	r18
    17fc:	0f 90       	pop	r0
    17fe:	0f be       	out	0x3f, r0	; 63
    1800:	0f 90       	pop	r0
    1802:	1f 90       	pop	r1
    1804:	18 95       	reti

00001806 <__vector_9>:
    1806:	1f 92       	push	r1
    1808:	0f 92       	push	r0
    180a:	0f b6       	in	r0, 0x3f	; 63
    180c:	0f 92       	push	r0
    180e:	11 24       	eor	r1, r1
    1810:	2f 93       	push	r18
    1812:	3f 93       	push	r19
    1814:	4f 93       	push	r20
    1816:	5f 93       	push	r21
    1818:	6f 93       	push	r22
    181a:	7f 93       	push	r23
    181c:	8f 93       	push	r24
    181e:	9f 93       	push	r25
    1820:	ef 93       	push	r30
    1822:	ff 93       	push	r31
    1824:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    1828:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    182c:	01 96       	adiw	r24, 0x01	; 1
    182e:	90 93 35 01 	sts	0x0135, r25	; 0x800135 <__data_end+0x1>
    1832:	80 93 34 01 	sts	0x0134, r24	; 0x800134 <__data_end>
    1836:	e0 91 3a 01 	lds	r30, 0x013A	; 0x80013a <timerQ>
    183a:	f0 91 3b 01 	lds	r31, 0x013B	; 0x80013b <timerQ+0x1>
    183e:	30 97       	sbiw	r30, 0x00	; 0
    1840:	39 f0       	breq	.+14     	; 0x1850 <__vector_9+0x4a>
    1842:	42 81       	ldd	r20, Z+2	; 0x02
    1844:	53 81       	ldd	r21, Z+3	; 0x03
    1846:	64 81       	ldd	r22, Z+4	; 0x04
    1848:	75 81       	ldd	r23, Z+5	; 0x05
    184a:	86 17       	cp	r24, r22
    184c:	97 07       	cpc	r25, r23
    184e:	a1 f0       	breq	.+40     	; 0x1878 <__vector_9+0x72>
    1850:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1854:	8d 7f       	andi	r24, 0xFD	; 253
    1856:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    185a:	ff 91       	pop	r31
    185c:	ef 91       	pop	r30
    185e:	9f 91       	pop	r25
    1860:	8f 91       	pop	r24
    1862:	7f 91       	pop	r23
    1864:	6f 91       	pop	r22
    1866:	5f 91       	pop	r21
    1868:	4f 91       	pop	r20
    186a:	3f 91       	pop	r19
    186c:	2f 91       	pop	r18
    186e:	0f 90       	pop	r0
    1870:	0f be       	out	0x3f, r0	; 63
    1872:	0f 90       	pop	r0
    1874:	1f 90       	pop	r1
    1876:	18 95       	reti
    1878:	ca 01       	movw	r24, r20
    187a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    187e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1882:	42 1b       	sub	r20, r18
    1884:	53 0b       	sbc	r21, r19
    1886:	41 30       	cpi	r20, 0x01	; 1
    1888:	51 05       	cpc	r21, r1
    188a:	51 f0       	breq	.+20     	; 0x18a0 <__vector_9+0x9a>
    188c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1890:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1894:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1898:	82 60       	ori	r24, 0x02	; 2
    189a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    189e:	dd cf       	rjmp	.-70     	; 0x185a <__vector_9+0x54>
    18a0:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18a4:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18a8:	01 96       	adiw	r24, 0x01	; 1
    18aa:	f0 cf       	rjmp	.-32     	; 0x188c <__vector_9+0x86>

000018ac <__vector_7>:
    18ac:	1f 92       	push	r1
    18ae:	0f 92       	push	r0
    18b0:	0f b6       	in	r0, 0x3f	; 63
    18b2:	0f 92       	push	r0
    18b4:	11 24       	eor	r1, r1
    18b6:	8f 92       	push	r8
    18b8:	9f 92       	push	r9
    18ba:	af 92       	push	r10
    18bc:	bf 92       	push	r11
    18be:	cf 92       	push	r12
    18c0:	df 92       	push	r13
    18c2:	ef 92       	push	r14
    18c4:	ff 92       	push	r15
    18c6:	0f 93       	push	r16
    18c8:	1f 93       	push	r17
    18ca:	2f 93       	push	r18
    18cc:	3f 93       	push	r19
    18ce:	4f 93       	push	r20
    18d0:	5f 93       	push	r21
    18d2:	6f 93       	push	r22
    18d4:	7f 93       	push	r23
    18d6:	8f 93       	push	r24
    18d8:	9f 93       	push	r25
    18da:	af 93       	push	r26
    18dc:	bf 93       	push	r27
    18de:	cf 93       	push	r28
    18e0:	df 93       	push	r29
    18e2:	ef 93       	push	r30
    18e4:	ff 93       	push	r31
    18e6:	e0 90 34 01 	lds	r14, 0x0134	; 0x800134 <__data_end>
    18ea:	f0 90 35 01 	lds	r15, 0x0135	; 0x800135 <__data_end+0x1>
    18ee:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    18f2:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    18f6:	b0 99       	sbic	0x16, 0	; 22
    18f8:	98 c0       	rjmp	.+304    	; 0x1a2a <__vector_7+0x17e>
    18fa:	47 01       	movw	r8, r14
    18fc:	0f 2c       	mov	r0, r15
    18fe:	00 0c       	add	r0, r0
    1900:	aa 08       	sbc	r10, r10
    1902:	bb 08       	sbc	r11, r11
    1904:	54 01       	movw	r10, r8
    1906:	99 24       	eor	r9, r9
    1908:	88 24       	eor	r8, r8
    190a:	a0 e0       	ldi	r26, 0x00	; 0
    190c:	b0 e0       	ldi	r27, 0x00	; 0
    190e:	88 2a       	or	r8, r24
    1910:	99 2a       	or	r9, r25
    1912:	aa 2a       	or	r10, r26
    1914:	bb 2a       	or	r11, r27
    1916:	c0 91 3a 01 	lds	r28, 0x013A	; 0x80013a <timerQ>
    191a:	d0 91 3b 01 	lds	r29, 0x013B	; 0x80013b <timerQ+0x1>
    191e:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <msgQ>
    1922:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <msgQ+0x1>
    1926:	20 97       	sbiw	r28, 0x00	; 0
    1928:	09 f4       	brne	.+2      	; 0x192c <__vector_7+0x80>
    192a:	3f c0       	rjmp	.+126    	; 0x19aa <__vector_7+0xfe>
    192c:	4a 81       	ldd	r20, Y+2	; 0x02
    192e:	5b 81       	ldd	r21, Y+3	; 0x03
    1930:	6c 81       	ldd	r22, Y+4	; 0x04
    1932:	7d 81       	ldd	r23, Y+5	; 0x05
    1934:	8a 01       	movw	r16, r20
    1936:	9b 01       	movw	r18, r22
    1938:	08 19       	sub	r16, r8
    193a:	19 09       	sbc	r17, r9
    193c:	2a 09       	sbc	r18, r10
    193e:	3b 09       	sbc	r19, r11
    1940:	10 16       	cp	r1, r16
    1942:	11 06       	cpc	r1, r17
    1944:	12 06       	cpc	r1, r18
    1946:	13 06       	cpc	r1, r19
    1948:	0c f4       	brge	.+2      	; 0x194c <__vector_7+0xa0>
    194a:	40 c0       	rjmp	.+128    	; 0x19cc <__vector_7+0x120>
    194c:	d8 80       	ld	r13, Y
    194e:	c9 80       	ldd	r12, Y+1	; 0x01
    1950:	00 97       	sbiw	r24, 0x00	; 0
    1952:	b9 f1       	breq	.+110    	; 0x19c2 <__vector_7+0x116>
    1954:	0e 81       	ldd	r16, Y+6	; 0x06
    1956:	1f 81       	ldd	r17, Y+7	; 0x07
    1958:	28 85       	ldd	r18, Y+8	; 0x08
    195a:	39 85       	ldd	r19, Y+9	; 0x09
    195c:	fc 01       	movw	r30, r24
    195e:	46 81       	ldd	r20, Z+6	; 0x06
    1960:	57 81       	ldd	r21, Z+7	; 0x07
    1962:	60 85       	ldd	r22, Z+8	; 0x08
    1964:	71 85       	ldd	r23, Z+9	; 0x09
    1966:	04 17       	cp	r16, r20
    1968:	15 07       	cpc	r17, r21
    196a:	26 07       	cpc	r18, r22
    196c:	37 07       	cpc	r19, r23
    196e:	4c f1       	brlt	.+82     	; 0x19c2 <__vector_7+0x116>
    1970:	dc 01       	movw	r26, r24
    1972:	0a c0       	rjmp	.+20     	; 0x1988 <__vector_7+0xdc>
    1974:	46 81       	ldd	r20, Z+6	; 0x06
    1976:	57 81       	ldd	r21, Z+7	; 0x07
    1978:	60 85       	ldd	r22, Z+8	; 0x08
    197a:	71 85       	ldd	r23, Z+9	; 0x09
    197c:	04 17       	cp	r16, r20
    197e:	15 07       	cpc	r17, r21
    1980:	26 07       	cpc	r18, r22
    1982:	37 07       	cpc	r19, r23
    1984:	dc f0       	brlt	.+54     	; 0x19bc <__vector_7+0x110>
    1986:	df 01       	movw	r26, r30
    1988:	ed 91       	ld	r30, X+
    198a:	fc 91       	ld	r31, X
    198c:	11 97       	sbiw	r26, 0x01	; 1
    198e:	30 97       	sbiw	r30, 0x00	; 0
    1990:	89 f7       	brne	.-30     	; 0x1974 <__vector_7+0xc8>
    1992:	19 82       	std	Y+1, r1	; 0x01
    1994:	18 82       	st	Y, r1
    1996:	cd 93       	st	X+, r28
    1998:	dc 93       	st	X, r29
    199a:	38 2f       	mov	r19, r24
    199c:	29 2f       	mov	r18, r25
    199e:	cd 2d       	mov	r28, r13
    19a0:	dc 2d       	mov	r29, r12
    19a2:	83 2f       	mov	r24, r19
    19a4:	92 2f       	mov	r25, r18
    19a6:	20 97       	sbiw	r28, 0x00	; 0
    19a8:	09 f6       	brne	.-126    	; 0x192c <__vector_7+0x80>
    19aa:	10 92 3b 01 	sts	0x013B, r1	; 0x80013b <timerQ+0x1>
    19ae:	10 92 3a 01 	sts	0x013A, r1	; 0x80013a <timerQ>
    19b2:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <msgQ+0x1>
    19b6:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <msgQ>
    19ba:	13 c0       	rjmp	.+38     	; 0x19e2 <__vector_7+0x136>
    19bc:	f9 83       	std	Y+1, r31	; 0x01
    19be:	e8 83       	st	Y, r30
    19c0:	ea cf       	rjmp	.-44     	; 0x1996 <__vector_7+0xea>
    19c2:	99 83       	std	Y+1, r25	; 0x01
    19c4:	88 83       	st	Y, r24
    19c6:	3c 2f       	mov	r19, r28
    19c8:	2d 2f       	mov	r18, r29
    19ca:	e9 cf       	rjmp	.-46     	; 0x199e <__vector_7+0xf2>
    19cc:	d0 93 3b 01 	sts	0x013B, r29	; 0x80013b <timerQ+0x1>
    19d0:	c0 93 3a 01 	sts	0x013A, r28	; 0x80013a <timerQ>
    19d4:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <msgQ+0x1>
    19d8:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <msgQ>
    19dc:	e6 16       	cp	r14, r22
    19de:	f7 06       	cpc	r15, r23
    19e0:	d9 f1       	breq	.+118    	; 0x1a58 <__vector_7+0x1ac>
    19e2:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    19e6:	8d 7f       	andi	r24, 0xFD	; 253
    19e8:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    19ec:	0e 94 20 04 	call	0x840	; 0x840 <schedule>
    19f0:	ff 91       	pop	r31
    19f2:	ef 91       	pop	r30
    19f4:	df 91       	pop	r29
    19f6:	cf 91       	pop	r28
    19f8:	bf 91       	pop	r27
    19fa:	af 91       	pop	r26
    19fc:	9f 91       	pop	r25
    19fe:	8f 91       	pop	r24
    1a00:	7f 91       	pop	r23
    1a02:	6f 91       	pop	r22
    1a04:	5f 91       	pop	r21
    1a06:	4f 91       	pop	r20
    1a08:	3f 91       	pop	r19
    1a0a:	2f 91       	pop	r18
    1a0c:	1f 91       	pop	r17
    1a0e:	0f 91       	pop	r16
    1a10:	ff 90       	pop	r15
    1a12:	ef 90       	pop	r14
    1a14:	df 90       	pop	r13
    1a16:	cf 90       	pop	r12
    1a18:	bf 90       	pop	r11
    1a1a:	af 90       	pop	r10
    1a1c:	9f 90       	pop	r9
    1a1e:	8f 90       	pop	r8
    1a20:	0f 90       	pop	r0
    1a22:	0f be       	out	0x3f, r0	; 63
    1a24:	0f 90       	pop	r0
    1a26:	1f 90       	pop	r1
    1a28:	18 95       	reti
    1a2a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a2e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a32:	47 01       	movw	r8, r14
    1a34:	8f ef       	ldi	r24, 0xFF	; 255
    1a36:	88 1a       	sub	r8, r24
    1a38:	98 0a       	sbc	r9, r24
    1a3a:	09 2c       	mov	r0, r9
    1a3c:	00 0c       	add	r0, r0
    1a3e:	aa 08       	sbc	r10, r10
    1a40:	bb 08       	sbc	r11, r11
    1a42:	d4 01       	movw	r26, r8
    1a44:	99 27       	eor	r25, r25
    1a46:	88 27       	eor	r24, r24
    1a48:	49 01       	movw	r8, r18
    1a4a:	a1 2c       	mov	r10, r1
    1a4c:	b1 2c       	mov	r11, r1
    1a4e:	88 2a       	or	r8, r24
    1a50:	99 2a       	or	r9, r25
    1a52:	aa 2a       	or	r10, r26
    1a54:	bb 2a       	or	r11, r27
    1a56:	5f cf       	rjmp	.-322    	; 0x1916 <__vector_7+0x6a>
    1a58:	ca 01       	movw	r24, r20
    1a5a:	20 91 84 00 	lds	r18, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a5e:	30 91 85 00 	lds	r19, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a62:	42 1b       	sub	r20, r18
    1a64:	53 0b       	sbc	r21, r19
    1a66:	41 30       	cpi	r20, 0x01	; 1
    1a68:	51 05       	cpc	r21, r1
    1a6a:	51 f0       	breq	.+20     	; 0x1a80 <__vector_7+0x1d4>
    1a6c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1a70:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1a74:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1a78:	82 60       	ori	r24, 0x02	; 2
    1a7a:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1a7e:	b6 cf       	rjmp	.-148    	; 0x19ec <__vector_7+0x140>
    1a80:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1a84:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1a88:	01 96       	adiw	r24, 0x01	; 1
    1a8a:	f0 cf       	rjmp	.-32     	; 0x1a6c <__vector_7+0x1c0>

00001a8c <async>:
    1a8c:	3f 92       	push	r3
    1a8e:	4f 92       	push	r4
    1a90:	5f 92       	push	r5
    1a92:	6f 92       	push	r6
    1a94:	7f 92       	push	r7
    1a96:	8f 92       	push	r8
    1a98:	9f 92       	push	r9
    1a9a:	af 92       	push	r10
    1a9c:	bf 92       	push	r11
    1a9e:	cf 92       	push	r12
    1aa0:	df 92       	push	r13
    1aa2:	ef 92       	push	r14
    1aa4:	ff 92       	push	r15
    1aa6:	0f 93       	push	r16
    1aa8:	1f 93       	push	r17
    1aaa:	cf 93       	push	r28
    1aac:	df 93       	push	r29
    1aae:	ef b7       	in	r30, 0x3f	; 63
    1ab0:	e0 78       	andi	r30, 0x80	; 128
    1ab2:	3e 2e       	mov	r3, r30
    1ab4:	f8 94       	cli
    1ab6:	c0 91 06 01 	lds	r28, 0x0106	; 0x800106 <msgPool>
    1aba:	d0 91 07 01 	lds	r29, 0x0107	; 0x800107 <msgPool+0x1>
    1abe:	20 97       	sbiw	r28, 0x00	; 0
    1ac0:	09 f4       	brne	.+2      	; 0x1ac4 <async+0x38>
    1ac2:	52 c1       	rjmp	.+676    	; 0x1d68 <async+0x2dc>
    1ac4:	e8 81       	ld	r30, Y
    1ac6:	f9 81       	ldd	r31, Y+1	; 0x01
    1ac8:	f0 93 07 01 	sts	0x0107, r31	; 0x800107 <msgPool+0x1>
    1acc:	e0 93 06 01 	sts	0x0106, r30	; 0x800106 <msgPool>
    1ad0:	1b 87       	std	Y+11, r17	; 0x0b
    1ad2:	0a 87       	std	Y+10, r16	; 0x0a
    1ad4:	fd 86       	std	Y+13, r15	; 0x0d
    1ad6:	ec 86       	std	Y+12, r14	; 0x0c
    1ad8:	df 86       	std	Y+15, r13	; 0x0f
    1ada:	ce 86       	std	Y+14, r12	; 0x0e
    1adc:	33 20       	and	r3, r3
    1ade:	09 f4       	brne	.+2      	; 0x1ae2 <async+0x56>
    1ae0:	6f c0       	rjmp	.+222    	; 0x1bc0 <async+0x134>
    1ae2:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1ae6:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1aea:	02 80       	ldd	r0, Z+2	; 0x02
    1aec:	f3 81       	ldd	r31, Z+3	; 0x03
    1aee:	e0 2d       	mov	r30, r0
    1af0:	c2 80       	ldd	r12, Z+2	; 0x02
    1af2:	d3 80       	ldd	r13, Z+3	; 0x03
    1af4:	e4 80       	ldd	r14, Z+4	; 0x04
    1af6:	f5 80       	ldd	r15, Z+5	; 0x05
    1af8:	c6 0e       	add	r12, r22
    1afa:	d7 1e       	adc	r13, r23
    1afc:	e8 1e       	adc	r14, r24
    1afe:	f9 1e       	adc	r15, r25
    1b00:	ca 82       	std	Y+2, r12	; 0x02
    1b02:	db 82       	std	Y+3, r13	; 0x03
    1b04:	ec 82       	std	Y+4, r14	; 0x04
    1b06:	fd 82       	std	Y+5, r15	; 0x05
    1b08:	12 16       	cp	r1, r18
    1b0a:	13 06       	cpc	r1, r19
    1b0c:	14 06       	cpc	r1, r20
    1b0e:	15 06       	cpc	r1, r21
    1b10:	0c f0       	brlt	.+2      	; 0x1b14 <async+0x88>
    1b12:	f8 c0       	rjmp	.+496    	; 0x1d04 <async+0x278>
    1b14:	da 01       	movw	r26, r20
    1b16:	c9 01       	movw	r24, r18
    1b18:	8c 01       	movw	r16, r24
    1b1a:	9d 01       	movw	r18, r26
    1b1c:	0c 0d       	add	r16, r12
    1b1e:	1d 1d       	adc	r17, r13
    1b20:	2e 1d       	adc	r18, r14
    1b22:	3f 1d       	adc	r19, r15
    1b24:	0e 83       	std	Y+6, r16	; 0x06
    1b26:	1f 83       	std	Y+7, r17	; 0x07
    1b28:	28 87       	std	Y+8, r18	; 0x08
    1b2a:	39 87       	std	Y+9, r19	; 0x09
    1b2c:	80 91 34 01 	lds	r24, 0x0134	; 0x800134 <__data_end>
    1b30:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <__data_end+0x1>
    1b34:	60 91 84 00 	lds	r22, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1b38:	70 91 85 00 	lds	r23, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1b3c:	b0 99       	sbic	0x16, 0	; 22
    1b3e:	49 c0       	rjmp	.+146    	; 0x1bd2 <async+0x146>
    1b40:	2c 01       	movw	r4, r24
    1b42:	09 2e       	mov	r0, r25
    1b44:	00 0c       	add	r0, r0
    1b46:	66 08       	sbc	r6, r6
    1b48:	77 08       	sbc	r7, r7
    1b4a:	52 01       	movw	r10, r4
    1b4c:	99 24       	eor	r9, r9
    1b4e:	88 24       	eor	r8, r8
    1b50:	2b 01       	movw	r4, r22
    1b52:	61 2c       	mov	r6, r1
    1b54:	71 2c       	mov	r7, r1
    1b56:	48 28       	or	r4, r8
    1b58:	59 28       	or	r5, r9
    1b5a:	6a 28       	or	r6, r10
    1b5c:	7b 28       	or	r7, r11
    1b5e:	b7 01       	movw	r22, r14
    1b60:	a6 01       	movw	r20, r12
    1b62:	44 19       	sub	r20, r4
    1b64:	55 09       	sbc	r21, r5
    1b66:	66 09       	sbc	r22, r6
    1b68:	77 09       	sbc	r23, r7
    1b6a:	14 16       	cp	r1, r20
    1b6c:	15 06       	cpc	r1, r21
    1b6e:	16 06       	cpc	r1, r22
    1b70:	17 06       	cpc	r1, r23
    1b72:	0c f0       	brlt	.+2      	; 0x1b76 <async+0xea>
    1b74:	68 c0       	rjmp	.+208    	; 0x1c46 <async+0x1ba>
    1b76:	a0 91 3a 01 	lds	r26, 0x013A	; 0x80013a <timerQ>
    1b7a:	b0 91 3b 01 	lds	r27, 0x013B	; 0x80013b <timerQ+0x1>
    1b7e:	10 97       	sbiw	r26, 0x00	; 0
    1b80:	09 f4       	brne	.+2      	; 0x1b84 <async+0xf8>
    1b82:	dc c0       	rjmp	.+440    	; 0x1d3c <async+0x2b0>
    1b84:	12 96       	adiw	r26, 0x02	; 2
    1b86:	0d 91       	ld	r16, X+
    1b88:	1d 91       	ld	r17, X+
    1b8a:	2d 91       	ld	r18, X+
    1b8c:	3c 91       	ld	r19, X
    1b8e:	15 97       	sbiw	r26, 0x05	; 5
    1b90:	c0 16       	cp	r12, r16
    1b92:	d1 06       	cpc	r13, r17
    1b94:	e2 06       	cpc	r14, r18
    1b96:	f3 06       	cpc	r15, r19
    1b98:	5c f4       	brge	.+22     	; 0x1bb0 <async+0x124>
    1b9a:	d0 c0       	rjmp	.+416    	; 0x1d3c <async+0x2b0>
    1b9c:	42 81       	ldd	r20, Z+2	; 0x02
    1b9e:	53 81       	ldd	r21, Z+3	; 0x03
    1ba0:	64 81       	ldd	r22, Z+4	; 0x04
    1ba2:	75 81       	ldd	r23, Z+5	; 0x05
    1ba4:	c4 16       	cp	r12, r20
    1ba6:	d5 06       	cpc	r13, r21
    1ba8:	e6 06       	cpc	r14, r22
    1baa:	f7 06       	cpc	r15, r23
    1bac:	4c f1       	brlt	.+82     	; 0x1c00 <async+0x174>
    1bae:	df 01       	movw	r26, r30
    1bb0:	ed 91       	ld	r30, X+
    1bb2:	fc 91       	ld	r31, X
    1bb4:	11 97       	sbiw	r26, 0x01	; 1
    1bb6:	30 97       	sbiw	r30, 0x00	; 0
    1bb8:	89 f7       	brne	.-30     	; 0x1b9c <async+0x110>
    1bba:	19 82       	std	Y+1, r1	; 0x01
    1bbc:	18 82       	st	Y, r1
    1bbe:	22 c0       	rjmp	.+68     	; 0x1c04 <async+0x178>
    1bc0:	c0 90 36 01 	lds	r12, 0x0136	; 0x800136 <timestamp>
    1bc4:	d0 90 37 01 	lds	r13, 0x0137	; 0x800137 <timestamp+0x1>
    1bc8:	e0 90 38 01 	lds	r14, 0x0138	; 0x800138 <timestamp+0x2>
    1bcc:	f0 90 39 01 	lds	r15, 0x0139	; 0x800139 <timestamp+0x3>
    1bd0:	93 cf       	rjmp	.-218    	; 0x1af8 <async+0x6c>
    1bd2:	e0 91 84 00 	lds	r30, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1bd6:	f0 91 85 00 	lds	r31, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1bda:	2c 01       	movw	r4, r24
    1bdc:	4f ef       	ldi	r20, 0xFF	; 255
    1bde:	44 1a       	sub	r4, r20
    1be0:	54 0a       	sbc	r5, r20
    1be2:	05 2c       	mov	r0, r5
    1be4:	00 0c       	add	r0, r0
    1be6:	66 08       	sbc	r6, r6
    1be8:	77 08       	sbc	r7, r7
    1bea:	b2 01       	movw	r22, r4
    1bec:	55 27       	eor	r21, r21
    1bee:	44 27       	eor	r20, r20
    1bf0:	2f 01       	movw	r4, r30
    1bf2:	61 2c       	mov	r6, r1
    1bf4:	71 2c       	mov	r7, r1
    1bf6:	44 2a       	or	r4, r20
    1bf8:	55 2a       	or	r5, r21
    1bfa:	66 2a       	or	r6, r22
    1bfc:	77 2a       	or	r7, r23
    1bfe:	af cf       	rjmp	.-162    	; 0x1b5e <async+0xd2>
    1c00:	f9 83       	std	Y+1, r31	; 0x01
    1c02:	e8 83       	st	Y, r30
    1c04:	cd 93       	st	X+, r28
    1c06:	dc 93       	st	X, r29
    1c08:	82 17       	cp	r24, r18
    1c0a:	93 07       	cpc	r25, r19
    1c0c:	09 f4       	brne	.+2      	; 0x1c10 <async+0x184>
    1c0e:	7f c0       	rjmp	.+254    	; 0x1d0e <async+0x282>
    1c10:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1c14:	8d 7f       	andi	r24, 0xFD	; 253
    1c16:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1c1a:	33 20       	and	r3, r3
    1c1c:	09 f0       	breq	.+2      	; 0x1c20 <async+0x194>
    1c1e:	78 94       	sei
    1c20:	ce 01       	movw	r24, r28
    1c22:	df 91       	pop	r29
    1c24:	cf 91       	pop	r28
    1c26:	1f 91       	pop	r17
    1c28:	0f 91       	pop	r16
    1c2a:	ff 90       	pop	r15
    1c2c:	ef 90       	pop	r14
    1c2e:	df 90       	pop	r13
    1c30:	cf 90       	pop	r12
    1c32:	bf 90       	pop	r11
    1c34:	af 90       	pop	r10
    1c36:	9f 90       	pop	r9
    1c38:	8f 90       	pop	r8
    1c3a:	7f 90       	pop	r7
    1c3c:	6f 90       	pop	r6
    1c3e:	5f 90       	pop	r5
    1c40:	4f 90       	pop	r4
    1c42:	3f 90       	pop	r3
    1c44:	08 95       	ret
    1c46:	a0 91 3c 01 	lds	r26, 0x013C	; 0x80013c <msgQ>
    1c4a:	b0 91 3d 01 	lds	r27, 0x013D	; 0x80013d <msgQ+0x1>
    1c4e:	10 97       	sbiw	r26, 0x00	; 0
    1c50:	09 f4       	brne	.+2      	; 0x1c54 <async+0x1c8>
    1c52:	83 c0       	rjmp	.+262    	; 0x1d5a <async+0x2ce>
    1c54:	16 96       	adiw	r26, 0x06	; 6
    1c56:	cd 90       	ld	r12, X+
    1c58:	dd 90       	ld	r13, X+
    1c5a:	ed 90       	ld	r14, X+
    1c5c:	fc 90       	ld	r15, X
    1c5e:	19 97       	sbiw	r26, 0x09	; 9
    1c60:	0c 15       	cp	r16, r12
    1c62:	1d 05       	cpc	r17, r13
    1c64:	2e 05       	cpc	r18, r14
    1c66:	3f 05       	cpc	r19, r15
    1c68:	64 f4       	brge	.+24     	; 0x1c82 <async+0x1f6>
    1c6a:	77 c0       	rjmp	.+238    	; 0x1d5a <async+0x2ce>
    1c6c:	c6 80       	ldd	r12, Z+6	; 0x06
    1c6e:	d7 80       	ldd	r13, Z+7	; 0x07
    1c70:	e0 84       	ldd	r14, Z+8	; 0x08
    1c72:	f1 84       	ldd	r15, Z+9	; 0x09
    1c74:	0c 15       	cp	r16, r12
    1c76:	1d 05       	cpc	r17, r13
    1c78:	2e 05       	cpc	r18, r14
    1c7a:	3f 05       	cpc	r19, r15
    1c7c:	0c f4       	brge	.+2      	; 0x1c80 <async+0x1f4>
    1c7e:	5b c0       	rjmp	.+182    	; 0x1d36 <async+0x2aa>
    1c80:	df 01       	movw	r26, r30
    1c82:	ed 91       	ld	r30, X+
    1c84:	fc 91       	ld	r31, X
    1c86:	11 97       	sbiw	r26, 0x01	; 1
    1c88:	30 97       	sbiw	r30, 0x00	; 0
    1c8a:	81 f7       	brne	.-32     	; 0x1c6c <async+0x1e0>
    1c8c:	19 82       	std	Y+1, r1	; 0x01
    1c8e:	18 82       	st	Y, r1
    1c90:	cd 93       	st	X+, r28
    1c92:	dc 93       	st	X, r29
    1c94:	33 20       	and	r3, r3
    1c96:	21 f2       	breq	.-120    	; 0x1c20 <async+0x194>
    1c98:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    1c9c:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    1ca0:	00 97       	sbiw	r24, 0x00	; 0
    1ca2:	09 f4       	brne	.+2      	; 0x1ca6 <async+0x21a>
    1ca4:	bc cf       	rjmp	.-136    	; 0x1c1e <async+0x192>
    1ca6:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    1caa:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    1cae:	20 91 3c 01 	lds	r18, 0x013C	; 0x80013c <msgQ>
    1cb2:	30 91 3d 01 	lds	r19, 0x013D	; 0x80013d <msgQ+0x1>
    1cb6:	02 81       	ldd	r16, Z+2	; 0x02
    1cb8:	13 81       	ldd	r17, Z+3	; 0x03
    1cba:	d9 01       	movw	r26, r18
    1cbc:	16 96       	adiw	r26, 0x06	; 6
    1cbe:	4d 91       	ld	r20, X+
    1cc0:	5d 91       	ld	r21, X+
    1cc2:	6d 91       	ld	r22, X+
    1cc4:	7c 91       	ld	r23, X
    1cc6:	19 97       	sbiw	r26, 0x09	; 9
    1cc8:	d8 01       	movw	r26, r16
    1cca:	16 96       	adiw	r26, 0x06	; 6
    1ccc:	0d 91       	ld	r16, X+
    1cce:	1d 91       	ld	r17, X+
    1cd0:	2d 91       	ld	r18, X+
    1cd2:	3c 91       	ld	r19, X
    1cd4:	19 97       	sbiw	r26, 0x09	; 9
    1cd6:	40 1b       	sub	r20, r16
    1cd8:	51 0b       	sbc	r21, r17
    1cda:	62 0b       	sbc	r22, r18
    1cdc:	73 0b       	sbc	r23, r19
    1cde:	77 ff       	sbrs	r23, 7
    1ce0:	9e cf       	rjmp	.-196    	; 0x1c1e <async+0x192>
    1ce2:	dc 01       	movw	r26, r24
    1ce4:	2d 91       	ld	r18, X+
    1ce6:	3c 91       	ld	r19, X
    1ce8:	11 97       	sbiw	r26, 0x01	; 1
    1cea:	30 93 05 01 	sts	0x0105, r19	; 0x800105 <threadPool+0x1>
    1cee:	20 93 04 01 	sts	0x0104, r18	; 0x800104 <threadPool>
    1cf2:	ed 93       	st	X+, r30
    1cf4:	fc 93       	st	X, r31
    1cf6:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <activeStack+0x1>
    1cfa:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <activeStack>
    1cfe:	0e 94 00 04 	call	0x800	; 0x800 <dispatch>
    1d02:	8d cf       	rjmp	.-230    	; 0x1c1e <async+0x192>
    1d04:	8f ef       	ldi	r24, 0xFF	; 255
    1d06:	9f ef       	ldi	r25, 0xFF	; 255
    1d08:	af ef       	ldi	r26, 0xFF	; 255
    1d0a:	bf e7       	ldi	r27, 0x7F	; 127
    1d0c:	05 cf       	rjmp	.-502    	; 0x1b18 <async+0x8c>
    1d0e:	c8 01       	movw	r24, r16
    1d10:	40 91 84 00 	lds	r20, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d14:	50 91 85 00 	lds	r21, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d18:	04 1b       	sub	r16, r20
    1d1a:	15 0b       	sbc	r17, r21
    1d1c:	01 30       	cpi	r16, 0x01	; 1
    1d1e:	11 05       	cpc	r17, r1
    1d20:	b1 f0       	breq	.+44     	; 0x1d4e <async+0x2c2>
    1d22:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7fc089>
    1d26:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7fc088>
    1d2a:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1d2e:	82 60       	ori	r24, 0x02	; 2
    1d30:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7fc06f>
    1d34:	72 cf       	rjmp	.-284    	; 0x1c1a <async+0x18e>
    1d36:	f9 83       	std	Y+1, r31	; 0x01
    1d38:	e8 83       	st	Y, r30
    1d3a:	aa cf       	rjmp	.-172    	; 0x1c90 <async+0x204>
    1d3c:	b9 83       	std	Y+1, r27	; 0x01
    1d3e:	a8 83       	st	Y, r26
    1d40:	d0 93 3b 01 	sts	0x013B, r29	; 0x80013b <timerQ+0x1>
    1d44:	c0 93 3a 01 	sts	0x013A, r28	; 0x80013a <timerQ>
    1d48:	97 01       	movw	r18, r14
    1d4a:	86 01       	movw	r16, r12
    1d4c:	5d cf       	rjmp	.-326    	; 0x1c08 <async+0x17c>
    1d4e:	80 91 84 00 	lds	r24, 0x0084	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
    1d52:	90 91 85 00 	lds	r25, 0x0085	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
    1d56:	01 96       	adiw	r24, 0x01	; 1
    1d58:	e4 cf       	rjmp	.-56     	; 0x1d22 <async+0x296>
    1d5a:	b9 83       	std	Y+1, r27	; 0x01
    1d5c:	a8 83       	st	Y, r26
    1d5e:	d0 93 3d 01 	sts	0x013D, r29	; 0x80013d <msgQ+0x1>
    1d62:	c0 93 3c 01 	sts	0x013C, r28	; 0x80013c <msgQ>
    1d66:	96 cf       	rjmp	.-212    	; 0x1c94 <async+0x208>
    1d68:	0e 94 60 04 	call	0x8c0	; 0x8c0 <dequeue.part.0>

00001d6c <sync>:
    1d6c:	cf 92       	push	r12
    1d6e:	df 92       	push	r13
    1d70:	ef 92       	push	r14
    1d72:	ff 92       	push	r15
    1d74:	0f 93       	push	r16
    1d76:	1f 93       	push	r17
    1d78:	cf 93       	push	r28
    1d7a:	df 93       	push	r29
    1d7c:	ec 01       	movw	r28, r24
    1d7e:	7b 01       	movw	r14, r22
    1d80:	6a 01       	movw	r12, r20
    1d82:	1f b7       	in	r17, 0x3f	; 63
    1d84:	10 78       	andi	r17, 0x80	; 128
    1d86:	f8 94       	cli
    1d88:	a8 81       	ld	r26, Y
    1d8a:	b9 81       	ldd	r27, Y+1	; 0x01
    1d8c:	10 97       	sbiw	r26, 0x00	; 0
    1d8e:	19 f4       	brne	.+6      	; 0x1d96 <sync+0x2a>
    1d90:	62 c0       	rjmp	.+196    	; 0x1e56 <sync+0xea>
    1d92:	a0 81       	ld	r26, Z
    1d94:	b1 81       	ldd	r27, Z+1	; 0x01
    1d96:	14 96       	adiw	r26, 0x04	; 4
    1d98:	ed 91       	ld	r30, X+
    1d9a:	fc 91       	ld	r31, X
    1d9c:	15 97       	sbiw	r26, 0x05	; 5
    1d9e:	30 97       	sbiw	r30, 0x00	; 0
    1da0:	c1 f7       	brne	.-16     	; 0x1d92 <sync+0x26>
    1da2:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1da6:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1daa:	2a 17       	cp	r18, r26
    1dac:	3b 07       	cpc	r19, r27
    1dae:	09 f4       	brne	.+2      	; 0x1db2 <sync+0x46>
    1db0:	4c c0       	rjmp	.+152    	; 0x1e4a <sync+0xde>
    1db2:	11 23       	and	r17, r17
    1db4:	a1 f1       	breq	.+104    	; 0x1e1e <sync+0xb2>
    1db6:	8a 81       	ldd	r24, Y+2	; 0x02
    1db8:	9b 81       	ldd	r25, Y+3	; 0x03
    1dba:	00 97       	sbiw	r24, 0x00	; 0
    1dbc:	19 f0       	breq	.+6      	; 0x1dc4 <sync+0x58>
    1dbe:	fc 01       	movw	r30, r24
    1dc0:	15 82       	std	Z+5, r1	; 0x05
    1dc2:	14 82       	std	Z+4, r1	; 0x04
    1dc4:	3b 83       	std	Y+3, r19	; 0x03
    1dc6:	2a 83       	std	Y+2, r18	; 0x02
    1dc8:	f9 01       	movw	r30, r18
    1dca:	d5 83       	std	Z+5, r29	; 0x05
    1dcc:	c4 83       	std	Z+4, r28	; 0x04
    1dce:	cd 01       	movw	r24, r26
    1dd0:	0e 94 00 04 	call	0x800	; 0x800 <dispatch>
    1dd4:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1dd8:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1ddc:	82 81       	ldd	r24, Z+2	; 0x02
    1dde:	93 81       	ldd	r25, Z+3	; 0x03
    1de0:	89 2b       	or	r24, r25
    1de2:	09 f4       	brne	.+2      	; 0x1de6 <sync+0x7a>
    1de4:	41 c0       	rjmp	.+130    	; 0x1e68 <sync+0xfc>
    1de6:	f9 83       	std	Y+1, r31	; 0x01
    1de8:	e8 83       	st	Y, r30
    1dea:	8a 81       	ldd	r24, Y+2	; 0x02
    1dec:	9b 81       	ldd	r25, Y+3	; 0x03
    1dee:	01 97       	sbiw	r24, 0x01	; 1
    1df0:	09 f0       	breq	.+2      	; 0x1df4 <sync+0x88>
    1df2:	78 94       	sei
    1df4:	b6 01       	movw	r22, r12
    1df6:	ce 01       	movw	r24, r28
    1df8:	f7 01       	movw	r30, r14
    1dfa:	09 95       	icall
    1dfc:	f8 2e       	mov	r15, r24
    1dfe:	09 2f       	mov	r16, r25
    1e00:	8f b7       	in	r24, 0x3f	; 63
    1e02:	f8 94       	cli
    1e04:	19 82       	std	Y+1, r1	; 0x01
    1e06:	18 82       	st	Y, r1
    1e08:	8a 81       	ldd	r24, Y+2	; 0x02
    1e0a:	9b 81       	ldd	r25, Y+3	; 0x03
    1e0c:	82 30       	cpi	r24, 0x02	; 2
    1e0e:	91 05       	cpc	r25, r1
    1e10:	a0 f4       	brcc	.+40     	; 0x1e3a <sync+0xce>
    1e12:	11 23       	and	r17, r17
    1e14:	79 f0       	breq	.+30     	; 0x1e34 <sync+0xc8>
    1e16:	78 94       	sei
    1e18:	8f 2d       	mov	r24, r15
    1e1a:	90 2f       	mov	r25, r16
    1e1c:	02 c0       	rjmp	.+4      	; 0x1e22 <sync+0xb6>
    1e1e:	8f ef       	ldi	r24, 0xFF	; 255
    1e20:	9f ef       	ldi	r25, 0xFF	; 255
    1e22:	df 91       	pop	r29
    1e24:	cf 91       	pop	r28
    1e26:	1f 91       	pop	r17
    1e28:	0f 91       	pop	r16
    1e2a:	ff 90       	pop	r15
    1e2c:	ef 90       	pop	r14
    1e2e:	df 90       	pop	r13
    1e30:	cf 90       	pop	r12
    1e32:	08 95       	ret
    1e34:	8f 2d       	mov	r24, r15
    1e36:	90 2f       	mov	r25, r16
    1e38:	f4 cf       	rjmp	.-24     	; 0x1e22 <sync+0xb6>
    1e3a:	1b 82       	std	Y+3, r1	; 0x03
    1e3c:	1a 82       	std	Y+2, r1	; 0x02
    1e3e:	fc 01       	movw	r30, r24
    1e40:	15 82       	std	Z+5, r1	; 0x05
    1e42:	14 82       	std	Z+4, r1	; 0x04
    1e44:	0e 94 00 04 	call	0x800	; 0x800 <dispatch>
    1e48:	e4 cf       	rjmp	.-56     	; 0x1e12 <sync+0xa6>
    1e4a:	11 23       	and	r17, r17
    1e4c:	41 f3       	breq	.-48     	; 0x1e1e <sync+0xb2>
    1e4e:	78 94       	sei
    1e50:	8f ef       	ldi	r24, 0xFF	; 255
    1e52:	9f ef       	ldi	r25, 0xFF	; 255
    1e54:	e6 cf       	rjmp	.-52     	; 0x1e22 <sync+0xb6>
    1e56:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1e5a:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1e5e:	99 83       	std	Y+1, r25	; 0x01
    1e60:	88 83       	st	Y, r24
    1e62:	11 23       	and	r17, r17
    1e64:	39 f2       	breq	.-114    	; 0x1df4 <sync+0x88>
    1e66:	c1 cf       	rjmp	.-126    	; 0x1dea <sync+0x7e>
    1e68:	78 94       	sei
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	d9 cf       	rjmp	.-78     	; 0x1e22 <sync+0xb6>

00001e70 <run>:
    1e70:	c0 91 3c 01 	lds	r28, 0x013C	; 0x80013c <msgQ>
    1e74:	d0 91 3d 01 	lds	r29, 0x013D	; 0x80013d <msgQ+0x1>
    1e78:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1e7c:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1e80:	20 97       	sbiw	r28, 0x00	; 0
    1e82:	09 f4       	brne	.+2      	; 0x1e86 <run+0x16>
    1e84:	6e c0       	rjmp	.+220    	; 0x1f62 <run+0xf2>
    1e86:	88 81       	ld	r24, Y
    1e88:	99 81       	ldd	r25, Y+1	; 0x01
    1e8a:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <msgQ+0x1>
    1e8e:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <msgQ>
    1e92:	d3 83       	std	Z+3, r29	; 0x03
    1e94:	c2 83       	std	Z+2, r28	; 0x02
    1e96:	78 94       	sei
    1e98:	4e 85       	ldd	r20, Y+14	; 0x0e
    1e9a:	5f 85       	ldd	r21, Y+15	; 0x0f
    1e9c:	6c 85       	ldd	r22, Y+12	; 0x0c
    1e9e:	7d 85       	ldd	r23, Y+13	; 0x0d
    1ea0:	8a 85       	ldd	r24, Y+10	; 0x0a
    1ea2:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ea4:	0e 94 b6 0e 	call	0x1d6c	; 0x1d6c <sync>
    1ea8:	8f b7       	in	r24, 0x3f	; 63
    1eaa:	f8 94       	cli
    1eac:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <msgPool>
    1eb0:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <msgPool+0x1>
    1eb4:	99 83       	std	Y+1, r25	; 0x01
    1eb6:	88 83       	st	Y, r24
    1eb8:	d0 93 07 01 	sts	0x0107, r29	; 0x800107 <msgPool+0x1>
    1ebc:	c0 93 06 01 	sts	0x0106, r28	; 0x800106 <msgPool>
    1ec0:	e0 90 02 01 	lds	r14, 0x0102	; 0x800102 <activeStack>
    1ec4:	f0 90 03 01 	lds	r15, 0x0103	; 0x800103 <activeStack+0x1>
    1ec8:	f7 01       	movw	r30, r14
    1eca:	a0 81       	ld	r26, Z
    1ecc:	b1 81       	ldd	r27, Z+1	; 0x01
    1ece:	12 96       	adiw	r26, 0x02	; 2
    1ed0:	8d 91       	ld	r24, X+
    1ed2:	9c 91       	ld	r25, X
    1ed4:	13 97       	sbiw	r26, 0x03	; 3
    1ed6:	c0 91 3c 01 	lds	r28, 0x013C	; 0x80013c <msgQ>
    1eda:	d0 91 3d 01 	lds	r29, 0x013D	; 0x80013d <msgQ+0x1>
    1ede:	20 97       	sbiw	r28, 0x00	; 0
    1ee0:	a9 f0       	breq	.+42     	; 0x1f0c <run+0x9c>
    1ee2:	00 97       	sbiw	r24, 0x00	; 0
    1ee4:	49 f2       	breq	.-110    	; 0x1e78 <run+0x8>
    1ee6:	4e 81       	ldd	r20, Y+6	; 0x06
    1ee8:	5f 81       	ldd	r21, Y+7	; 0x07
    1eea:	68 85       	ldd	r22, Y+8	; 0x08
    1eec:	79 85       	ldd	r23, Y+9	; 0x09
    1eee:	fc 01       	movw	r30, r24
    1ef0:	06 81       	ldd	r16, Z+6	; 0x06
    1ef2:	17 81       	ldd	r17, Z+7	; 0x07
    1ef4:	20 85       	ldd	r18, Z+8	; 0x08
    1ef6:	31 85       	ldd	r19, Z+9	; 0x09
    1ef8:	40 1b       	sub	r20, r16
    1efa:	51 0b       	sbc	r21, r17
    1efc:	62 0b       	sbc	r22, r18
    1efe:	73 0b       	sbc	r23, r19
    1f00:	14 16       	cp	r1, r20
    1f02:	15 06       	cpc	r1, r21
    1f04:	16 06       	cpc	r1, r22
    1f06:	17 06       	cpc	r1, r23
    1f08:	0c f0       	brlt	.+2      	; 0x1f0c <run+0x9c>
    1f0a:	b6 cf       	rjmp	.-148    	; 0x1e78 <run+0x8>
    1f0c:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <activeStack+0x1>
    1f10:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <activeStack>
    1f14:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <threadPool>
    1f18:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <threadPool+0x1>
    1f1c:	f7 01       	movw	r30, r14
    1f1e:	91 83       	std	Z+1, r25	; 0x01
    1f20:	80 83       	st	Z, r24
    1f22:	f0 92 05 01 	sts	0x0105, r15	; 0x800105 <threadPool+0x1>
    1f26:	e0 92 04 01 	sts	0x0104, r14	; 0x800104 <threadPool>
    1f2a:	14 96       	adiw	r26, 0x04	; 4
    1f2c:	ed 91       	ld	r30, X+
    1f2e:	fc 91       	ld	r31, X
    1f30:	15 97       	sbiw	r26, 0x05	; 5
    1f32:	30 97       	sbiw	r30, 0x00	; 0
    1f34:	41 f0       	breq	.+16     	; 0x1f46 <run+0xd6>
    1f36:	a0 81       	ld	r26, Z
    1f38:	b1 81       	ldd	r27, Z+1	; 0x01
    1f3a:	14 96       	adiw	r26, 0x04	; 4
    1f3c:	ed 91       	ld	r30, X+
    1f3e:	fc 91       	ld	r31, X
    1f40:	15 97       	sbiw	r26, 0x05	; 5
    1f42:	30 97       	sbiw	r30, 0x00	; 0
    1f44:	c1 f7       	brne	.-16     	; 0x1f36 <run+0xc6>
    1f46:	cd 01       	movw	r24, r26
    1f48:	0e 94 00 04 	call	0x800	; 0x800 <dispatch>
    1f4c:	c0 91 3c 01 	lds	r28, 0x013C	; 0x80013c <msgQ>
    1f50:	d0 91 3d 01 	lds	r29, 0x013D	; 0x80013d <msgQ+0x1>
    1f54:	e0 91 00 01 	lds	r30, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1f58:	f0 91 01 01 	lds	r31, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1f5c:	20 97       	sbiw	r28, 0x00	; 0
    1f5e:	09 f0       	breq	.+2      	; 0x1f62 <run+0xf2>
    1f60:	92 cf       	rjmp	.-220    	; 0x1e86 <run+0x16>
    1f62:	0e 94 60 04 	call	0x8c0	; 0x8c0 <dequeue.part.0>

00001f66 <ABORT>:
    1f66:	cf 93       	push	r28
    1f68:	df 93       	push	r29
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	4f b7       	in	r20, 0x3f	; 63
    1f6e:	40 78       	andi	r20, 0x80	; 128
    1f70:	f8 94       	cli
    1f72:	c0 91 3a 01 	lds	r28, 0x013A	; 0x80013a <timerQ>
    1f76:	d0 91 3b 01 	lds	r29, 0x013B	; 0x80013b <timerQ+0x1>
    1f7a:	20 97       	sbiw	r28, 0x00	; 0
    1f7c:	69 f0       	breq	.+26     	; 0x1f98 <ABORT+0x32>
    1f7e:	8c 17       	cp	r24, r28
    1f80:	9d 07       	cpc	r25, r29
    1f82:	31 f4       	brne	.+12     	; 0x1f90 <ABORT+0x2a>
    1f84:	6c c0       	rjmp	.+216    	; 0x205e <ABORT+0xf8>
    1f86:	ae 17       	cp	r26, r30
    1f88:	bf 07       	cpc	r27, r31
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <ABORT+0x28>
    1f8c:	47 c0       	rjmp	.+142    	; 0x201c <ABORT+0xb6>
    1f8e:	ef 01       	movw	r28, r30
    1f90:	e8 81       	ld	r30, Y
    1f92:	f9 81       	ldd	r31, Y+1	; 0x01
    1f94:	30 97       	sbiw	r30, 0x00	; 0
    1f96:	b9 f7       	brne	.-18     	; 0x1f86 <ABORT+0x20>
    1f98:	c0 91 3c 01 	lds	r28, 0x013C	; 0x80013c <msgQ>
    1f9c:	d0 91 3d 01 	lds	r29, 0x013D	; 0x80013d <msgQ+0x1>
    1fa0:	20 97       	sbiw	r28, 0x00	; 0
    1fa2:	69 f0       	breq	.+26     	; 0x1fbe <ABORT+0x58>
    1fa4:	ac 17       	cp	r26, r28
    1fa6:	bd 07       	cpc	r27, r29
    1fa8:	31 f4       	brne	.+12     	; 0x1fb6 <ABORT+0x50>
    1faa:	61 c0       	rjmp	.+194    	; 0x206e <ABORT+0x108>
    1fac:	ae 17       	cp	r26, r30
    1fae:	bf 07       	cpc	r27, r31
    1fb0:	09 f4       	brne	.+2      	; 0x1fb4 <ABORT+0x4e>
    1fb2:	4c c0       	rjmp	.+152    	; 0x204c <ABORT+0xe6>
    1fb4:	ef 01       	movw	r28, r30
    1fb6:	e8 81       	ld	r30, Y
    1fb8:	f9 81       	ldd	r31, Y+1	; 0x01
    1fba:	30 97       	sbiw	r30, 0x00	; 0
    1fbc:	b9 f7       	brne	.-18     	; 0x1fac <ABORT+0x46>
    1fbe:	e0 91 02 01 	lds	r30, 0x0102	; 0x800102 <activeStack>
    1fc2:	f0 91 03 01 	lds	r31, 0x0103	; 0x800103 <activeStack+0x1>
    1fc6:	30 97       	sbiw	r30, 0x00	; 0
    1fc8:	d9 f1       	breq	.+118    	; 0x2040 <ABORT+0xda>
    1fca:	20 91 00 01 	lds	r18, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
    1fce:	30 91 01 01 	lds	r19, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
    1fd2:	05 c0       	rjmp	.+10     	; 0x1fde <ABORT+0x78>
    1fd4:	01 90       	ld	r0, Z+
    1fd6:	f0 81       	ld	r31, Z
    1fd8:	e0 2d       	mov	r30, r0
    1fda:	30 97       	sbiw	r30, 0x00	; 0
    1fdc:	89 f1       	breq	.+98     	; 0x2040 <ABORT+0xda>
    1fde:	e2 17       	cp	r30, r18
    1fe0:	f3 07       	cpc	r31, r19
    1fe2:	c1 f3       	breq	.-16     	; 0x1fd4 <ABORT+0x6e>
    1fe4:	82 81       	ldd	r24, Z+2	; 0x02
    1fe6:	93 81       	ldd	r25, Z+3	; 0x03
    1fe8:	a8 17       	cp	r26, r24
    1fea:	b9 07       	cpc	r27, r25
    1fec:	99 f7       	brne	.-26     	; 0x1fd4 <ABORT+0x6e>
    1fee:	64 81       	ldd	r22, Z+4	; 0x04
    1ff0:	75 81       	ldd	r23, Z+5	; 0x05
    1ff2:	1a 96       	adiw	r26, 0x0a	; 10
    1ff4:	8d 91       	ld	r24, X+
    1ff6:	9c 91       	ld	r25, X
    1ff8:	1b 97       	sbiw	r26, 0x0b	; 11
    1ffa:	68 17       	cp	r22, r24
    1ffc:	79 07       	cpc	r23, r25
    1ffe:	51 f7       	brne	.-44     	; 0x1fd4 <ABORT+0x6e>
    2000:	13 82       	std	Z+3, r1	; 0x03
    2002:	12 82       	std	Z+2, r1	; 0x02
    2004:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <msgPool>
    2008:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <msgPool+0x1>
    200c:	11 96       	adiw	r26, 0x01	; 1
    200e:	9c 93       	st	X, r25
    2010:	8e 93       	st	-X, r24
    2012:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <msgPool+0x1>
    2016:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <msgPool>
    201a:	12 c0       	rjmp	.+36     	; 0x2040 <ABORT+0xda>
    201c:	20 97       	sbiw	r28, 0x00	; 0
    201e:	01 f1       	breq	.+64     	; 0x2060 <ABORT+0xfa>
    2020:	8d 91       	ld	r24, X+
    2022:	9c 91       	ld	r25, X
    2024:	11 97       	sbiw	r26, 0x01	; 1
    2026:	99 83       	std	Y+1, r25	; 0x01
    2028:	88 83       	st	Y, r24
    202a:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <msgPool>
    202e:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <msgPool+0x1>
    2032:	11 96       	adiw	r26, 0x01	; 1
    2034:	9c 93       	st	X, r25
    2036:	8e 93       	st	-X, r24
    2038:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <msgPool+0x1>
    203c:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <msgPool>
    2040:	44 23       	and	r20, r20
    2042:	09 f0       	breq	.+2      	; 0x2046 <ABORT+0xe0>
    2044:	78 94       	sei
    2046:	df 91       	pop	r29
    2048:	cf 91       	pop	r28
    204a:	08 95       	ret
    204c:	20 97       	sbiw	r28, 0x00	; 0
    204e:	41 f7       	brne	.-48     	; 0x2020 <ABORT+0xba>
    2050:	80 81       	ld	r24, Z
    2052:	91 81       	ldd	r25, Z+1	; 0x01
    2054:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <msgQ+0x1>
    2058:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <msgQ>
    205c:	e6 cf       	rjmp	.-52     	; 0x202a <ABORT+0xc4>
    205e:	fc 01       	movw	r30, r24
    2060:	80 81       	ld	r24, Z
    2062:	91 81       	ldd	r25, Z+1	; 0x01
    2064:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <timerQ+0x1>
    2068:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <timerQ>
    206c:	de cf       	rjmp	.-68     	; 0x202a <ABORT+0xc4>
    206e:	fd 01       	movw	r30, r26
    2070:	ef cf       	rjmp	.-34     	; 0x2050 <ABORT+0xea>

00002072 <install>:
    
    TIMER_INIT();
}

void install(Object *obj, Method m, enum Vector i) {
    if (i >= 0 && i < N_VECTORS) {
    2072:	42 31       	cpi	r20, 0x12	; 18
    2074:	b8 f4       	brcc	.+46     	; 0x20a4 <install+0x32>
        char status;
        DISABLE(status);
    2076:	2f b7       	in	r18, 0x3f	; 63
    2078:	f8 94       	cli
        otable[i] = obj;
    207a:	50 e0       	ldi	r21, 0x00	; 0
    207c:	44 0f       	add	r20, r20
    207e:	55 1f       	adc	r21, r21
    2080:	fa 01       	movw	r30, r20
    2082:	ee 5b       	subi	r30, 0xBE	; 190
    2084:	fe 4f       	sbci	r31, 0xFE	; 254
    2086:	91 83       	std	Z+1, r25	; 0x01
    2088:	80 83       	st	Z, r24
        mtable[i] = m;
    208a:	fa 01       	movw	r30, r20
    208c:	e6 52       	subi	r30, 0x26	; 38
    208e:	fe 4f       	sbci	r31, 0xFE	; 254
    2090:	71 83       	std	Z+1, r23	; 0x01
    2092:	60 83       	st	Z, r22
        obj->wantedBy = INSTALLED_TAG;  // Mark object as subject to synchronization by interrupt disabling
    2094:	41 e0       	ldi	r20, 0x01	; 1
    2096:	50 e0       	ldi	r21, 0x00	; 0
    2098:	fc 01       	movw	r30, r24
    209a:	53 83       	std	Z+3, r21	; 0x03
    209c:	42 83       	std	Z+2, r20	; 0x02
        ENABLE(status);
    209e:	27 ff       	sbrs	r18, 7
    20a0:	01 c0       	rjmp	.+2      	; 0x20a4 <install+0x32>
    20a2:	78 94       	sei
    20a4:	08 95       	ret

000020a6 <tinytimber>:
    }
}

int tinytimber(Object *obj, Method m, int arg) {
    20a6:	8c 01       	movw	r16, r24
    20a8:	7b 01       	movw	r14, r22
    20aa:	6a 01       	movw	r12, r20
    char status;
    DISABLE(status);
    20ac:	8f b7       	in	r24, 0x3f	; 63
    20ae:	f8 94       	cli
    initialize();
    20b0:	0e 94 95 03 	call	0x72a	; 0x72a <initialize>
    ENABLE(1);
    20b4:	78 94       	sei
    if (m != NULL)
    20b6:	e1 14       	cp	r14, r1
    20b8:	f1 04       	cpc	r15, r1
    20ba:	41 f0       	breq	.+16     	; 0x20cc <tinytimber+0x26>
        //m(obj, arg);
		ASYNC(obj,m,arg);
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	a9 01       	movw	r20, r18
    20c2:	60 e0       	ldi	r22, 0x00	; 0
    20c4:	70 e0       	ldi	r23, 0x00	; 0
    20c6:	cb 01       	movw	r24, r22
    20c8:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <async>
    DISABLE(status);
    20cc:	8f b7       	in	r24, 0x3f	; 63
    20ce:	f8 94       	cli
        }
    }
}

static void idle(void) {
    schedule();
    20d0:	0e 94 20 04 	call	0x840	; 0x840 <schedule>
    ENABLE(1);
    20d4:	78 94       	sei
    while (1) {
        SLEEP();
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	83 bf       	out	0x33, r24	; 51
    20da:	88 95       	sleep
    20dc:	fd cf       	rjmp	.-6      	; 0x20d8 <tinytimber+0x32>

000020de <__divmodhi4>:
    20de:	97 fb       	bst	r25, 7
    20e0:	07 2e       	mov	r0, r23
    20e2:	16 f4       	brtc	.+4      	; 0x20e8 <__divmodhi4+0xa>
    20e4:	00 94       	com	r0
    20e6:	07 d0       	rcall	.+14     	; 0x20f6 <__divmodhi4_neg1>
    20e8:	77 fd       	sbrc	r23, 7
    20ea:	09 d0       	rcall	.+18     	; 0x20fe <__divmodhi4_neg2>
    20ec:	0e 94 83 10 	call	0x2106	; 0x2106 <__udivmodhi4>
    20f0:	07 fc       	sbrc	r0, 7
    20f2:	05 d0       	rcall	.+10     	; 0x20fe <__divmodhi4_neg2>
    20f4:	3e f4       	brtc	.+14     	; 0x2104 <__divmodhi4_exit>

000020f6 <__divmodhi4_neg1>:
    20f6:	90 95       	com	r25
    20f8:	81 95       	neg	r24
    20fa:	9f 4f       	sbci	r25, 0xFF	; 255
    20fc:	08 95       	ret

000020fe <__divmodhi4_neg2>:
    20fe:	70 95       	com	r23
    2100:	61 95       	neg	r22
    2102:	7f 4f       	sbci	r23, 0xFF	; 255

00002104 <__divmodhi4_exit>:
    2104:	08 95       	ret

00002106 <__udivmodhi4>:
    2106:	aa 1b       	sub	r26, r26
    2108:	bb 1b       	sub	r27, r27
    210a:	51 e1       	ldi	r21, 0x11	; 17
    210c:	07 c0       	rjmp	.+14     	; 0x211c <__udivmodhi4_ep>

0000210e <__udivmodhi4_loop>:
    210e:	aa 1f       	adc	r26, r26
    2110:	bb 1f       	adc	r27, r27
    2112:	a6 17       	cp	r26, r22
    2114:	b7 07       	cpc	r27, r23
    2116:	10 f0       	brcs	.+4      	; 0x211c <__udivmodhi4_ep>
    2118:	a6 1b       	sub	r26, r22
    211a:	b7 0b       	sbc	r27, r23

0000211c <__udivmodhi4_ep>:
    211c:	88 1f       	adc	r24, r24
    211e:	99 1f       	adc	r25, r25
    2120:	5a 95       	dec	r21
    2122:	a9 f7       	brne	.-22     	; 0x210e <__udivmodhi4_loop>
    2124:	80 95       	com	r24
    2126:	90 95       	com	r25
    2128:	bc 01       	movw	r22, r24
    212a:	cd 01       	movw	r24, r26
    212c:	08 95       	ret

0000212e <setjmp>:
    212e:	dc 01       	movw	r26, r24
    2130:	2d 92       	st	X+, r2
    2132:	3d 92       	st	X+, r3
    2134:	4d 92       	st	X+, r4
    2136:	5d 92       	st	X+, r5
    2138:	6d 92       	st	X+, r6
    213a:	7d 92       	st	X+, r7
    213c:	8d 92       	st	X+, r8
    213e:	9d 92       	st	X+, r9
    2140:	ad 92       	st	X+, r10
    2142:	bd 92       	st	X+, r11
    2144:	cd 92       	st	X+, r12
    2146:	dd 92       	st	X+, r13
    2148:	ed 92       	st	X+, r14
    214a:	fd 92       	st	X+, r15
    214c:	0d 93       	st	X+, r16
    214e:	1d 93       	st	X+, r17
    2150:	cd 93       	st	X+, r28
    2152:	dd 93       	st	X+, r29
    2154:	ff 91       	pop	r31
    2156:	ef 91       	pop	r30
    2158:	8d b7       	in	r24, 0x3d	; 61
    215a:	8d 93       	st	X+, r24
    215c:	8e b7       	in	r24, 0x3e	; 62
    215e:	8d 93       	st	X+, r24
    2160:	8f b7       	in	r24, 0x3f	; 63
    2162:	8d 93       	st	X+, r24
    2164:	ed 93       	st	X+, r30
    2166:	fd 93       	st	X+, r31
    2168:	88 27       	eor	r24, r24
    216a:	99 27       	eor	r25, r25
    216c:	09 94       	ijmp

0000216e <longjmp>:
    216e:	dc 01       	movw	r26, r24
    2170:	cb 01       	movw	r24, r22
    2172:	81 30       	cpi	r24, 0x01	; 1
    2174:	91 05       	cpc	r25, r1
    2176:	81 1d       	adc	r24, r1
    2178:	2d 90       	ld	r2, X+
    217a:	3d 90       	ld	r3, X+
    217c:	4d 90       	ld	r4, X+
    217e:	5d 90       	ld	r5, X+
    2180:	6d 90       	ld	r6, X+
    2182:	7d 90       	ld	r7, X+
    2184:	8d 90       	ld	r8, X+
    2186:	9d 90       	ld	r9, X+
    2188:	ad 90       	ld	r10, X+
    218a:	bd 90       	ld	r11, X+
    218c:	cd 90       	ld	r12, X+
    218e:	dd 90       	ld	r13, X+
    2190:	ed 90       	ld	r14, X+
    2192:	fd 90       	ld	r15, X+
    2194:	0d 91       	ld	r16, X+
    2196:	1d 91       	ld	r17, X+
    2198:	cd 91       	ld	r28, X+
    219a:	dd 91       	ld	r29, X+
    219c:	ed 91       	ld	r30, X+
    219e:	fd 91       	ld	r31, X+
    21a0:	0d 90       	ld	r0, X+
    21a2:	f8 94       	cli
    21a4:	fe bf       	out	0x3e, r31	; 62
    21a6:	0f be       	out	0x3f, r0	; 63
    21a8:	ed bf       	out	0x3d, r30	; 61
    21aa:	ed 91       	ld	r30, X+
    21ac:	fd 91       	ld	r31, X+
    21ae:	09 94       	ijmp

000021b0 <_exit>:
    21b0:	f8 94       	cli

000021b2 <__stop_program>:
    21b2:	ff cf       	rjmp	.-2      	; 0x21b2 <__stop_program>
